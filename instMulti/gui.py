# -*- coding: utf-8 -*-
"""
Instagram Bot Pro v3.0 - –°—É—á–∞—Å–Ω–∏–π GUI –∑ –ø–æ–≤–Ω–∏–º —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª–æ–º
"""

import tkinter as tk
from tkinter import ttk, messagebox, filedialog, scrolledtext
import json
import os
from datetime import datetime
from typing import Dict, List, Any, Optional
import threading
import asyncio
import queue

try:
    from config import BotConfig
    from automation_engine import InstagramAutomation
    from data_manager_final import DataManager
    from browser_manager import BrowserFactory
except ImportError as e:
    print(f"–ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É: {e}")


class ModernStyle:
    """–°—É—á–∞—Å–Ω–∞ —Ç–µ–º–Ω–∞ —Ç–µ–º–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è"""
    
    COLORS = {
        'primary': '#6366f1',
        'primary_dark': '#4f46e5',
        'success': '#10b981',
        'warning': '#f59e0b',
        'error': '#ef4444',
        'background': '#0f172a',
        'surface': '#1e293b',
        'card': '#334155',
        'border': '#475569',
        'text': '#f1f5f9',
        'text_secondary': '#94a3b8',
        'sidebar': '#1e293b',
        'sidebar_active': '#6366f1',
    }
    
    FONTS = {
        'title': ('Segoe UI', 24, 'bold'),
        'heading': ('Segoe UI', 14, 'bold'),
        'body': ('Segoe UI', 11),
        'small': ('Segoe UI', 9),
        'button': ('Segoe UI', 10, 'bold')
    }


class AnimatedButton(tk.Button):
    """–ê–Ω—ñ–º–æ–≤–∞–Ω–∞ –∫–Ω–æ–ø–∫–∞"""
    
    def __init__(self, parent, **kwargs):
        self.default_bg = kwargs.get('bg', ModernStyle.COLORS['primary'])
        self.hover_bg = kwargs.get('hover_bg', ModernStyle.COLORS['primary_dark'])
        
        if 'hover_bg' in kwargs:
            del kwargs['hover_bg']
        
        super().__init__(parent, **kwargs)
        
        self.configure(
            relief='flat',
            borderwidth=0,
            font=ModernStyle.FONTS['button'],
            fg='white',
            bg=self.default_bg,
            cursor='hand2',
            padx=15,
            pady=8
        )
        
        self.bind('<Enter>', lambda e: self.configure(bg=self.hover_bg))
        self.bind('<Leave>', lambda e: self.configure(bg=self.default_bg))


class GlassCard(tk.Frame):
    """–°–∫–ª—è–Ω–∞ –∫–∞—Ä—Ç–∫–∞"""
    
    def __init__(self, parent, title="", **kwargs):
        super().__init__(parent, **kwargs)
        
        self.configure(
            bg=ModernStyle.COLORS['card'],
            relief='flat',
            bd=1,
            highlightbackground=ModernStyle.COLORS['border'],
            highlightthickness=1
        )
        
        if title:
            title_frame = tk.Frame(self, bg=ModernStyle.COLORS['card'])
            title_frame.pack(fill='x', padx=20, pady=(20, 10))
            
            title_label = tk.Label(
                title_frame,
                text=title,
                font=ModernStyle.FONTS['heading'],
                bg=ModernStyle.COLORS['card'],
                fg=ModernStyle.COLORS['text']
            )
            title_label.pack(anchor='w')


class ChainBuilderWidget(tk.Frame):
    """–í—ñ–¥–∂–µ—Ç –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ª–∞–Ω—Ü—é–∂–∫–∞ –¥—ñ–π"""
    
    def __init__(self, parent, **kwargs):
        super().__init__(parent, **kwargs)
        self.configure(bg=ModernStyle.COLORS['surface'])
        
        self.chain = []
        self.action_widgets = []
        
        self.create_widgets()
    
    def create_widgets(self):
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—ñ–¥–∂–µ—Ç—ñ–≤"""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header = tk.Label(
            self,
            text="üîó –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –ª–∞–Ω—Ü—é–∂–∫–∞ –¥—ñ–π",
            font=ModernStyle.FONTS['heading'],
            bg=ModernStyle.COLORS['surface'],
            fg=ModernStyle.COLORS['text']
        )
        header.pack(pady=10)
        
        # –ö–Ω–æ–ø–∫–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –¥—ñ–π
        actions_frame = tk.Frame(self, bg=ModernStyle.COLORS['surface'])
        actions_frame.pack(fill='x', padx=20, pady=10)
        
        tk.Label(
            actions_frame,
            text="–î–æ—Å—Ç—É–ø–Ω—ñ –¥—ñ—ó:",
            font=ModernStyle.FONTS['body'],
            bg=ModernStyle.COLORS['surface'],
            fg=ModernStyle.COLORS['text']
        ).pack(anchor='w')
        
        buttons_frame = tk.Frame(actions_frame, bg=ModernStyle.COLORS['surface'])
        buttons_frame.pack(fill='x', pady=5)
        
        # –ö–Ω–æ–ø–∫–∏ –¥—ñ–π
        action_buttons = [
            ("üë§ –ü—ñ–¥–ø–∏—Å–∫–∞", "follow", self.add_follow_action),
            ("‚ù§Ô∏è –õ–∞–π–∫ –ø–æ—Å—Ç—ñ–≤", "like_posts", self.add_like_posts_action),
            ("üìñ –ü–µ—Ä–µ–≥–ª—è–¥ —Å—Ç–æ—Ä—ñ—Å", "view_stories", self.add_view_stories_action),
            ("üíñ –õ–∞–π–∫ —Å—Ç–æ—Ä—ñ—Å", "like_stories", self.add_like_stories_action),
            ("üí¨ –í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ —Å—Ç–æ—Ä—ñ—Å", "reply_stories", self.add_reply_stories_action),
            ("üì© –ü—Ä–∏–≤–∞—Ç–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è", "send_dm", self.add_send_dm_action),
            ("üîÑ –ó–∞—Ç—Ä–∏–º–∫–∞", "delay", self.add_delay_action)
        ]
        
        for i, (text, action_type, command) in enumerate(action_buttons):
            btn = AnimatedButton(
                buttons_frame,
                text=text,
                command=command,
                bg=ModernStyle.COLORS['primary']
            )
            btn.grid(row=i//3, column=i%3, padx=5, pady=2, sticky='ew')
        
        buttons_frame.grid_columnconfigure(0, weight=1)
        buttons_frame.grid_columnconfigure(1, weight=1)
        buttons_frame.grid_columnconfigure(2, weight=1)
        
        # –ü–æ—Ç–æ—á–Ω–∏–π –ª–∞–Ω—Ü—é–∂–æ–∫
        self.chain_frame = tk.Frame(self, bg=ModernStyle.COLORS['surface'])
        self.chain_frame.pack(fill='both', expand=True, padx=20, pady=10)
        
        tk.Label(
            self.chain_frame,
            text="–ü–æ—Ç–æ—á–Ω–∏–π –ª–∞–Ω—Ü—é–∂–æ–∫:",
            font=ModernStyle.FONTS['body'],
            bg=ModernStyle.COLORS['surface'],
            fg=ModernStyle.COLORS['text']
        ).pack(anchor='w')
        
        # –°–∫—Ä–æ–ª—é—é—á–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ª–∞–Ω—Ü—é–∂–∫–∞
        self.canvas = tk.Canvas(
            self.chain_frame,
            bg=ModernStyle.COLORS['background'],
            highlightthickness=0,
            height=300
        )
        scrollbar = ttk.Scrollbar(self.chain_frame, orient="vertical", command=self.canvas.yview)
        self.scrollable_frame = tk.Frame(self.canvas, bg=ModernStyle.COLORS['background'])
        
        self.scrollable_frame.bind(
            "<Configure>",
            lambda e: self.canvas.configure(scrollregion=self.canvas.bbox("all"))
        )
        
        self.canvas.create_window((0, 0), window=self.scrollable_frame, anchor="nw")
        self.canvas.configure(yscrollcommand=scrollbar.set)
        
        self.canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è
        control_frame = tk.Frame(self, bg=ModernStyle.COLORS['surface'])
        control_frame.pack(fill='x', padx=20, pady=10)
        
        AnimatedButton(
            control_frame,
            text="üíæ –ó–±–µ—Ä–µ–≥—Ç–∏ –ª–∞–Ω—Ü—é–∂–æ–∫",
            command=self.save_chain,
            bg=ModernStyle.COLORS['success']
        ).pack(side='left', padx=5)
        
        AnimatedButton(
            control_frame,
            text="üìÇ –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏",
            command=self.load_chain,
            bg=ModernStyle.COLORS['primary']
        ).pack(side='left', padx=5)
        
        AnimatedButton(
            control_frame,
            text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç–∏",
            command=self.clear_chain,
            bg=ModernStyle.COLORS['error']
        ).pack(side='left', padx=5)
    
    def add_follow_action(self):
        """–î–æ–¥–∞–≤–∞–Ω–Ω—è –¥—ñ—ó –ø—ñ–¥–ø–∏—Å–∫–∏"""
        self.add_action({
            'type': 'follow',
            'name': '–ü—ñ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞',
            'icon': 'üë§',
            'enabled': True
        })
    
    def add_like_posts_action(self):
        """–î–æ–¥–∞–≤–∞–Ω–Ω—è –¥—ñ—ó –ª–∞–π–∫—É –ø–æ—Å—Ç—ñ–≤"""
        dialog = ActionDialog(self, "‚ù§Ô∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–∞–π–∫—É –ø–æ—Å—Ç—ñ–≤")
        if dialog.result:
            count = dialog.result.get('count', 2)
            self.add_action({
                'type': 'like_posts',
                'name': f'–õ–∞–π–∫ {count} –ø–æ—Å—Ç—ñ–≤',
                'icon': '‚ù§Ô∏è',
                'settings': {'count': count},
                'enabled': True
            })
    
    def add_view_stories_action(self):
        """–î–æ–¥–∞–≤–∞–Ω–Ω—è –¥—ñ—ó –ø–µ—Ä–µ–≥–ª—è–¥—É —Å—Ç–æ—Ä—ñ—Å"""
        dialog = ActionDialog(self, "üìñ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–µ—Ä–µ–≥–ª—è–¥—É —Å—Ç–æ—Ä—ñ—Å")
        if dialog.result:
            count = dialog.result.get('count', 3)
            self.add_action({
                'type': 'view_stories',
                'name': f'–ü–µ—Ä–µ–≥–ª—è–¥ {count} —Å—Ç–æ—Ä—ñ—Å',
                'icon': 'üìñ',
                'settings': {'count': count},
                'enabled': True
            })
    
    def add_like_stories_action(self):
        """–î–æ–¥–∞–≤–∞–Ω–Ω—è –¥—ñ—ó –ª–∞–π–∫—É —Å—Ç–æ—Ä—ñ—Å"""
        self.add_action({
            'type': 'like_stories',
            'name': '–õ–∞–π–∫ —Å—Ç–æ—Ä—ñ—Å',
            'icon': 'üíñ',
            'enabled': True
        })
    
    def add_reply_stories_action(self):
        """–î–æ–¥–∞–≤–∞–Ω–Ω—è –¥—ñ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ —Å—Ç–æ—Ä—ñ—Å"""
        self.add_action({
            'type': 'reply_stories',
            'name': '–í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ —Å—Ç–æ—Ä—ñ—Å',
            'icon': 'üí¨',
            'enabled': True
        })
    
    def add_send_dm_action(self):
        """–î–æ–¥–∞–≤–∞–Ω–Ω—è –¥—ñ—ó –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ DM"""
        self.add_action({
            'type': 'send_dm',
            'name': '–ü—Ä–∏–≤–∞—Ç–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è',
            'icon': 'üì©',
            'enabled': True
        })
    
    def add_delay_action(self):
        """–î–æ–¥–∞–≤–∞–Ω–Ω—è –∑–∞—Ç—Ä–∏–º–∫–∏"""
        dialog = ActionDialog(self, "üîÑ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–∞—Ç—Ä–∏–º–∫–∏")
        if dialog.result:
            delay = dialog.result.get('delay', 30)
            self.add_action({
                'type': 'delay',
                'name': f'–ó–∞—Ç—Ä–∏–º–∫–∞ {delay} —Å–µ–∫',
                'icon': 'üîÑ',
                'settings': {'delay': delay},
                'enabled': True
            })
    
    def add_action(self, action):
        """–î–æ–¥–∞–≤–∞–Ω–Ω—è –¥—ñ—ó –¥–æ –ª–∞–Ω—Ü—é–∂–∫–∞"""
        self.chain.append(action)
        self.update_chain_display()
    
    def update_chain_display(self):
        """–û–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ª–∞–Ω—Ü—é–∂–∫–∞"""
        # –û—á–∏—â–µ–Ω–Ω—è
        for widget in self.action_widgets:
            widget.destroy()
        self.action_widgets.clear()
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—ñ–¥–∂–µ—Ç—ñ–≤ –¥–ª—è –∫–æ–∂–Ω–æ—ó –¥—ñ—ó
        for i, action in enumerate(self.chain):
            self.create_action_widget(i, action)
    
    def create_action_widget(self, index, action):
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—ñ–¥–∂–µ—Ç–∞ –¥—ñ—ó"""
        frame = tk.Frame(self.scrollable_frame, bg=ModernStyle.COLORS['card'])
        frame.pack(fill='x', padx=5, pady=2)
        self.action_widgets.append(frame)
        
        # –ù–æ–º–µ—Ä –∫—Ä–æ–∫—É
        step_label = tk.Label(
            frame,
            text=f"{index + 1}.",
            font=ModernStyle.FONTS['body'],
            bg=ModernStyle.COLORS['card'],
            fg=ModernStyle.COLORS['text_secondary'],
            width=3
        )
        step_label.pack(side='left', padx=5)
        
        # –Ü–∫–æ–Ω–∫–∞ —Ç–∞ –Ω–∞–∑–≤–∞
        info_frame = tk.Frame(frame, bg=ModernStyle.COLORS['card'])
        info_frame.pack(side='left', fill='x', expand=True, padx=5)
        
        tk.Label(
            info_frame,
            text=f"{action['icon']} {action['name']}",
            font=ModernStyle.FONTS['body'],
            bg=ModernStyle.COLORS['card'],
            fg=ModernStyle.COLORS['text']
        ).pack(anchor='w')
        
        # –ü–µ—Ä–µ–º–∏–∫–∞—á —É–≤—ñ–º–∫–Ω–µ–Ω–Ω—è
        enabled_var = tk.BooleanVar(value=action.get('enabled', True))
        enabled_check = tk.Checkbutton(
            frame,
            variable=enabled_var,
            bg=ModernStyle.COLORS['card'],
            fg=ModernStyle.COLORS['text'],
            selectcolor=ModernStyle.COLORS['surface'],
            command=lambda idx=index, var=enabled_var: self.toggle_action(idx, var.get())
        )
        enabled_check.pack(side='right', padx=5)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è
        btn_frame = tk.Frame(frame, bg=ModernStyle.COLORS['card'])
        btn_frame.pack(side='right', padx=5)
        
        # –ö–Ω–æ–ø–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è
        delete_btn = tk.Button(
            btn_frame,
            text="üóëÔ∏è",
            command=lambda idx=index: self.remove_action(idx),
            bg=ModernStyle.COLORS['error'],
            fg='white',
            relief='flat',
            font=('Arial', 8),
            width=3
        )
        delete_btn.pack(side='right', padx=2)
        
        # –ö–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è
        if index > 0:
            up_btn = tk.Button(
                btn_frame,
                text="‚Üë",
                command=lambda idx=index: self.move_action(idx, -1),
                bg=ModernStyle.COLORS['primary'],
                fg='white',
                relief='flat',
                font=('Arial', 8),
                width=2
            )
            up_btn.pack(side='right', padx=1)
        
        if index < len(self.chain) - 1:
            down_btn = tk.Button(
                btn_frame,
                text="‚Üì",
                command=lambda idx=index: self.move_action(idx, 1),
                bg=ModernStyle.COLORS['primary'],
                fg='white',
                relief='flat',
                font=('Arial', 8),
                width=2
            )
            down_btn.pack(side='right', padx=1)
    
    def toggle_action(self, index, enabled):
        """–ü–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è —Å—Ç–∞–Ω—É –¥—ñ—ó"""
        if 0 <= index < len(self.chain):
            self.chain[index]['enabled'] = enabled
    
    def remove_action(self, index):
        """–í–∏–¥–∞–ª–µ–Ω–Ω—è –¥—ñ—ó"""
        if 0 <= index < len(self.chain):
            self.chain.pop(index)
            self.update_chain_display()
    
    def move_action(self, index, direction):
        """–ü–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è –¥—ñ—ó"""
        new_index = index + direction
        if 0 <= new_index < len(self.chain):
            self.chain[index], self.chain[new_index] = self.chain[new_index], self.chain[index]
            self.update_chain_display()
    
    def clear_chain(self):
        """–û—á–∏—â–µ–Ω–Ω—è –ª–∞–Ω—Ü—é–∂–∫–∞"""
        if messagebox.askyesno("–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è", "–û—á–∏—Å—Ç–∏—Ç–∏ –≤–µ—Å—å –ª–∞–Ω—Ü—é–∂–æ–∫?"):
            self.chain.clear()
            self.update_chain_display()
    
    def save_chain(self):
        """–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ª–∞–Ω—Ü—é–∂–∫–∞"""
        if not self.chain:
            messagebox.showwarning("–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è", "–õ–∞–Ω—Ü—é–∂–æ–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π")
            return
        
        filename = filedialog.asksaveasfilename(
            defaultextension=".json",
            filetypes=[("JSON files", "*.json")],
            title="–ó–±–µ—Ä–µ–≥—Ç–∏ –ª–∞–Ω—Ü—é–∂–æ–∫ –¥—ñ–π"
        )
        
        if filename:
            try:
                with open(filename, 'w', encoding='utf-8') as f:
                    json.dump(self.chain, f, indent=2, ensure_ascii=False)
                messagebox.showinfo("–£—Å–ø—ñ—Ö", f"–õ–∞–Ω—Ü—é–∂–æ–∫ –∑–±–µ—Ä–µ–∂–µ–Ω–æ: {filename}")
            except Exception as e:
                messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏: {e}")
    
    def load_chain(self):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ª–∞–Ω—Ü—é–∂–∫–∞"""
        filename = filedialog.askopenfilename(
            filetypes=[("JSON files", "*.json")],
            title="–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –ª–∞–Ω—Ü—é–∂–æ–∫ –¥—ñ–π"
        )
        
        if filename:
            try:
                with open(filename, 'r', encoding='utf-8') as f:
                    self.chain = json.load(f)
                self.update_chain_display()
                messagebox.showinfo("–£—Å–ø—ñ—Ö", f"–õ–∞–Ω—Ü—é–∂–æ–∫ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ: {filename}")
            except Exception as e:
                messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏: {e}")
    
    def get_chain(self):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –ª–∞–Ω—Ü—é–∂–∫–∞"""
        return [action for action in self.chain if action.get('enabled', True)]


class ActionDialog(tk.Toplevel):
    """–î—ñ–∞–ª–æ–≥ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥—ñ—ó"""
    
    def __init__(self, parent, title):
        super().__init__(parent)
        self.result = None
        
        self.title(title)
        self.geometry("400x200")
        self.configure(bg=ModernStyle.COLORS['background'])
        self.transient(parent)
        self.grab_set()
        
        # –¶–µ–Ω—Ç—Ä—É–≤–∞–Ω–Ω—è
        self.geometry("+{}+{}".format(
            parent.winfo_rootx() + 50,
            parent.winfo_rooty() + 50
        ))
        
        self.create_widgets()
    
    def create_widgets(self):
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—ñ–¥–∂–µ—Ç—ñ–≤ –¥—ñ–∞–ª–æ–≥—É"""
        main_frame = tk.Frame(self, bg=ModernStyle.COLORS['background'])
        main_frame.pack(fill='both', expand=True, padx=20, pady=20)
        
        # –ü–æ–ª–µ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ
        tk.Label(
            main_frame,
            text="–ö—ñ–ª—å–∫—ñ—Å—Ç—å:",
            font=ModernStyle.FONTS['body'],
            bg=ModernStyle.COLORS['background'],
            fg=ModernStyle.COLORS['text']
        ).pack(anchor='w')
        
        self.count_var = tk.StringVar(value="2")
        count_entry = tk.Entry(
            main_frame,
            textvariable=self.count_var,
            font=ModernStyle.FONTS['body'],
            bg=ModernStyle.COLORS['surface'],
            fg=ModernStyle.COLORS['text'],
            insertbackground=ModernStyle.COLORS['text']
        )
        count_entry.pack(fill='x', pady=5)
        
        # –ü–æ–ª–µ –∑–∞—Ç—Ä–∏–º–∫–∏ (—è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ)
        tk.Label(
            main_frame,
            text="–ó–∞—Ç—Ä–∏–º–∫–∞ (—Å–µ–∫—É–Ω–¥–∏):",
            font=ModernStyle.FONTS['body'],
            bg=ModernStyle.COLORS['background'],
            fg=ModernStyle.COLORS['text']
        ).pack(anchor='w', pady=(10, 0))
        
        self.delay_var = tk.StringVar(value="30")
        delay_entry = tk.Entry(
            main_frame,
            textvariable=self.delay_var,
            font=ModernStyle.FONTS['body'],
            bg=ModernStyle.COLORS['surface'],
            fg=ModernStyle.COLORS['text'],
            insertbackground=ModernStyle.COLORS['text']
        )
        delay_entry.pack(fill='x', pady=5)
        
        # –ö–Ω–æ–ø–∫–∏
        btn_frame = tk.Frame(main_frame, bg=ModernStyle.COLORS['background'])
        btn_frame.pack(fill='x', pady=20)
        
        AnimatedButton(
            btn_frame,
            text="OK",
            command=self.ok_clicked,
            bg=ModernStyle.COLORS['success']
        ).pack(side='right', padx=5)
        
        AnimatedButton(
            btn_frame,
            text="–°–∫–∞—Å—É–≤–∞—Ç–∏",
            command=self.cancel_clicked,
            bg=ModernStyle.COLORS['error']
        ).pack(side='right')
    
    def ok_clicked(self):
        """–û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è OK"""
        try:
            count = int(self.count_var.get()) if self.count_var.get() else 1
            delay = int(self.delay_var.get()) if self.delay_var.get() else 30
            
            self.result = {
                'count': max(1, count),
                'delay': max(1, delay)
            }
            self.destroy()
        except ValueError:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—ñ —á–∏—Å–ª–∞")
    
    def cancel_clicked(self):
        """–û–±—Ä–æ–±–∫–∞ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è"""
        self.destroy()


class TextManagerWidget(tk.Frame):
    """–í—ñ–¥–∂–µ—Ç —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Ç–µ–∫—Å—Ç–∞–º–∏"""
    
    def __init__(self, parent, **kwargs):
        super().__init__(parent, **kwargs)
        self.configure(bg=ModernStyle.COLORS['surface'])
        
        self.texts = {
            'story_replies': [],
            'direct_messages': []
        }
        
        self.create_widgets()
        self.load_texts()
    
    def create_widgets(self):
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—ñ–¥–∂–µ—Ç—ñ–≤"""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header = tk.Label(
            self,
            text="üìù –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Ç–µ–∫—Å—Ç–∞–º–∏",
            font=ModernStyle.FONTS['heading'],
            bg=ModernStyle.COLORS['surface'],
            fg=ModernStyle.COLORS['text']
        )
        header.pack(pady=10)
        
        # Notebook –¥–ª—è –≤–∫–ª–∞–¥–æ–∫
        self.notebook = ttk.Notebook(self)
        self.notebook.pack(fill='both', expand=True, padx=20, pady=10)
        
        # –°—Ç–∏–ª—ñ–∑–∞—Ü—ñ—è ttk
        style = ttk.Style()
        style.configure('TNotebook', background=ModernStyle.COLORS['surface'])
        style.configure('TNotebook.Tab', background=ModernStyle.COLORS['card'])
        
        # –í–∫–ª–∞–¥–∫–∞ –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π –Ω–∞ —Å—Ç–æ—Ä—ñ—Å
        self.stories_frame = tk.Frame(self.notebook, bg=ModernStyle.COLORS['card'])
        self.notebook.add(self.stories_frame, text="–í—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ —Å—Ç–æ—Ä—ñ—Å")
        
        # –í–∫–ª–∞–¥–∫–∞ –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
        self.dm_frame = tk.Frame(self.notebook, bg=ModernStyle.COLORS['card'])
        self.notebook.add(self.dm_frame, text="–ü—Ä–∏–≤–∞—Ç–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è")
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—ñ–¥–∂–µ—Ç—ñ–≤ –¥–ª—è –∫–æ–∂–Ω–æ—ó –≤–∫–ª–∞–¥–∫–∏
        self.create_text_tab(self.stories_frame, 'story_replies', 
                           "–¢–µ–∫—Å—Ç–∏ –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π –Ω–∞ —Å—Ç–æ—Ä—ñ—Å:")
        self.create_text_tab(self.dm_frame, 'direct_messages', 
                           "–¢–µ–∫—Å—Ç–∏ –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å:")
    
    def create_text_tab(self, parent, text_type, label):
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤–∫–ª–∞–¥–∫–∏ –¥–ª—è —Ç–µ–∫—Å—Ç—ñ–≤"""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        tk.Label(
            parent,
            text=label,
            font=ModernStyle.FONTS['body'],
            bg=ModernStyle.COLORS['card'],
            fg=ModernStyle.COLORS['text']
        ).pack(anchor='w', padx=20, pady=(10, 5))
        
        # –§—Ä–µ–π–º –¥–ª—è –ø–æ–ª—è –≤–≤–µ–¥–µ–Ω–Ω—è —Ç–∞ –∫–Ω–æ–ø–∫–∏
        input_frame = tk.Frame(parent, bg=ModernStyle.COLORS['card'])
        input_frame.pack(fill='x', padx=20, pady=5)
        
        # –ü–æ–ª–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç—É
        text_entry = scrolledtext.ScrolledText(
            input_frame,
            height=3,
            font=ModernStyle.FONTS['body'],
            bg=ModernStyle.COLORS['surface'],
            fg=ModernStyle.COLORS['text'],
            insertbackground=ModernStyle.COLORS['text'],
            wrap=tk.WORD
        )
        text_entry.pack(side='left', fill='both', expand=True)
        
        # –ö–Ω–æ–ø–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è
        add_btn = AnimatedButton(
            input_frame,
            text="‚ûï",
            command=lambda: self.add_text(text_type, text_entry),
            bg=ModernStyle.COLORS['success']
        )
        add_btn.pack(side='right', padx=(10, 0))
        
        # –°–ø–∏—Å–æ–∫ —ñ—Å–Ω—É—é—á–∏—Ö —Ç–µ–∫—Å—Ç—ñ–≤
        tk.Label(
            parent,
            text="–ó–±–µ—Ä–µ–∂–µ–Ω—ñ —Ç–µ–∫—Å—Ç–∏:",
            font=ModernStyle.FONTS['body'],
            bg=ModernStyle.COLORS['card'],
            fg=ModernStyle.COLORS['text']
        ).pack(anchor='w', padx=20, pady=(10, 5))
        
        # –°–∫—Ä–æ–ª—é—é—á–∏–π —Å–ø–∏—Å–æ–∫
        list_frame = tk.Frame(parent, bg=ModernStyle.COLORS['card'])
        list_frame.pack(fill='both', expand=True, padx=20, pady=5)
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è listbox –∑ –∫–∞—Å—Ç–æ–º–Ω–∏–º —Å—Ç–∏–ª–µ–º
        listbox = tk.Listbox(
            list_frame,
            font=ModernStyle.FONTS['body'],
            bg=ModernStyle.COLORS['background'],
            fg=ModernStyle.COLORS['text'],
            selectbackground=ModernStyle.COLORS['primary'],
            selectforeground='white',
            relief='flat',
            borderwidth=0
        )
        listbox.pack(side='left', fill='both', expand=True)
        
        scrollbar = ttk.Scrollbar(list_frame, orient="vertical", command=listbox.yview)
        scrollbar.pack(side='right', fill='y')
        listbox.configure(yscrollcommand=scrollbar.set)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è
        control_frame = tk.Frame(parent, bg=ModernStyle.COLORS['card'])
        control_frame.pack(fill='x', padx=20, pady=10)
        
        AnimatedButton(
            control_frame,
            text="üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏",
            command=lambda: self.remove_text(text_type, listbox),
            bg=ModernStyle.COLORS['error']
        ).pack(side='left', padx=5)
        
        AnimatedButton(
            control_frame,
            text="‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏",
            command=lambda: self.edit_text(text_type, listbox, text_entry),
            bg=ModernStyle.COLORS['warning']
        ).pack(side='left', padx=5)
        
        AnimatedButton(
            control_frame,
            text="üíæ –ó–±–µ—Ä–µ–≥—Ç–∏ –≤—Å–µ",
            command=self.save_texts,
            bg=ModernStyle.COLORS['success']
        ).pack(side='right', padx=5)
        
        # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø–æ—Å–∏–ª–∞–Ω—å
        setattr(self, f'{text_type}_listbox', listbox)
        setattr(self, f'{text_type}_entry', text_entry)
    
    def add_text(self, text_type, text_entry):
        """–î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç—É"""
        text = text_entry.get('1.0', tk.END).strip()
        if text:
            self.texts[text_type].append(text)
            self.update_listbox(text_type)
            text_entry.delete('1.0', tk.END)
            self.save_texts()
    
    def remove_text(self, text_type, listbox):
        """–í–∏–¥–∞–ª–µ–Ω–Ω—è —Ç–µ–∫—Å—Ç—É"""
        selection = listbox.curselection()
        if selection:
            index = selection[0]
            self.texts[text_type].pop(index)
            self.update_listbox(text_type)
            self.save_texts()
    
    def edit_text(self, text_type, listbox, text_entry):
        """–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É"""
        selection = listbox.curselection()
        if selection:
            index = selection[0]
            current_text = self.texts[text_type][index]
            text_entry.delete('1.0', tk.END)
            text_entry.insert('1.0', current_text)
    
    def update_listbox(self, text_type):
        """–û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É —Ç–µ–∫—Å—Ç—ñ–≤"""
        listbox = getattr(self, f'{text_type}_listbox')
        listbox.delete(0, tk.END)
        
        for i, text in enumerate(self.texts[text_type]):
            # –û–±–º–µ–∂–µ–Ω–Ω—è –¥–æ–≤–∂–∏–Ω–∏ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
            display_text = text[:50] + "..." if len(text) > 50 else text
            # –ó–∞–º—ñ–Ω–∞ –ø–µ—Ä–µ–Ω–æ—Å—ñ–≤ —Ä—è–¥–∫—ñ–≤ –Ω–∞ –ø—Ä–æ–±—ñ–ª–∏ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
            display_text = display_text.replace('\n', ' ')
            listbox.insert(tk.END, f"{i+1}. {display_text}")
    
    def save_texts(self):
        """–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ç–µ–∫—Å—Ç—ñ–≤"""
        try:
            os.makedirs('data', exist_ok=True)
            with open('data/texts.json', 'w', encoding='utf-8') as f:
                json.dump(self.texts, f, indent=2, ensure_ascii=False)
        except Exception as e:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ —Ç–µ–∫—Å—Ç–∏: {e}")
    
    def load_texts(self):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö —Ç–µ–∫—Å—Ç—ñ–≤"""
        try:
            if os.path.exists('data/texts.json'):
                with open('data/texts.json', 'r', encoding='utf-8') as f:
                    self.texts = json.load(f)
                
                # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
                for text_type in self.texts:
                    if hasattr(self, f'{text_type}_listbox'):
                        self.update_listbox(text_type)
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–µ–∫—Å—Ç—ñ–≤: {e}")
    
    def get_texts(self, text_type):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—ñ–≤ –ø–µ–≤–Ω–æ–≥–æ —Ç–∏–ø—É"""
        return self.texts.get(text_type, [])


class AccountManagerWidget(tk.Frame):
    """–í—ñ–¥–∂–µ—Ç —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∞–∫–∞—É–Ω—Ç–∞–º–∏"""
    
    def __init__(self, parent, **kwargs):
        super().__init__(parent, **kwargs)
        self.configure(bg=ModernStyle.COLORS['surface'])
        
        self.accounts = []
        self.create_widgets()
        self.load_accounts()
    
    def create_widgets(self):
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—ñ–¥–∂–µ—Ç—ñ–≤"""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header = tk.Label(
            self,
            text="üë• –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∞–∫–∞—É–Ω—Ç–∞–º–∏",
            font=ModernStyle.FONTS['heading'],
            bg=ModernStyle.COLORS['surface'],
            fg=ModernStyle.COLORS['text']
        )
        header.pack(pady=10)
        
        # –§–æ—Ä–º–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∞–∫–∞—É–Ω—Ç—É
        add_frame = GlassCard(self, title="–î–æ–¥–∞—Ç–∏ –Ω–æ–≤–∏–π –∞–∫–∞—É–Ω—Ç")
        add_frame.pack(fill='x', padx=20, pady=10)
        
        form_frame = tk.Frame(add_frame, bg=ModernStyle.COLORS['card'])
        form_frame.pack(fill='x', padx=20, pady=(0, 20))
        
        # –ü–æ–ª—è –≤–≤–µ–¥–µ–Ω–Ω—è
        fields_frame = tk.Frame(form_frame, bg=ModernStyle.COLORS['card'])
        fields_frame.pack(fill='x')
        
        # Username
        tk.Label(
            fields_frame,
            text="–õ–æ–≥—ñ–Ω:",
            font=ModernStyle.FONTS['body'],
            bg=ModernStyle.COLORS['card'],
            fg=ModernStyle.COLORS['text']
        ).grid(row=0, column=0, sticky='w', pady=2)
        
        self.username_var = tk.StringVar()
        username_entry = tk.Entry(
            fields_frame,
            textvariable=self.username_var,
            font=ModernStyle.FONTS['body'],
            bg=ModernStyle.COLORS['surface'],
            fg=ModernStyle.COLORS['text'],
            insertbackground=ModernStyle.COLORS['text']
        )
        username_entry.grid(row=0, column=1, sticky='ew', padx=5, pady=2)
        
        # Password
        tk.Label(
            fields_frame,
            text="–ü–∞—Ä–æ–ª—å:",
            font=ModernStyle.FONTS['body'],
            bg=ModernStyle.COLORS['card'],
            fg=ModernStyle.COLORS['text']
        ).grid(row=1, column=0, sticky='w', pady=2)
        
        self.password_var = tk.StringVar()
        password_entry = tk.Entry(
            fields_frame,
            textvariable=self.password_var,
            show='*',
            font=ModernStyle.FONTS['body'],
            bg=ModernStyle.COLORS['surface'],
            fg=ModernStyle.COLORS['text'],
            insertbackground=ModernStyle.COLORS['text']
        )
        password_entry.grid(row=1, column=1, sticky='ew', padx=5, pady=2)
        
        # Proxy
        tk.Label(
            fields_frame,
            text="–ü—Ä–æ–∫—Å—ñ (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ):",
            font=ModernStyle.FONTS['body'],
            bg=ModernStyle.COLORS['card'],
            fg=ModernStyle.COLORS['text']
        ).grid(row=2, column=0, sticky='w', pady=2)
        
        self.proxy_var = tk.StringVar()
        proxy_entry = tk.Entry(
            fields_frame,
            textvariable=self.proxy_var,
            font=ModernStyle.FONTS['body'],
            bg=ModernStyle.COLORS['surface'],
            fg=ModernStyle.COLORS['text'],
            insertbackground=ModernStyle.COLORS['text']
        )
        proxy_entry.grid(row=2, column=1, sticky='ew', padx=5, pady=2)
        
        fields_frame.grid_columnconfigure(1, weight=1)
        
        # –ö–Ω–æ–ø–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è
        AnimatedButton(
            form_frame,
            text="‚ûï –î–æ–¥–∞—Ç–∏ –∞–∫–∞—É–Ω—Ç",
            command=self.add_account,
            bg=ModernStyle.COLORS['success']
        ).pack(pady=10)
        
        # –°–ø–∏—Å–æ–∫ –∞–∫–∞—É–Ω—Ç—ñ–≤
        list_frame = GlassCard(self, title="–ó–±–µ—Ä–µ–∂–µ–Ω—ñ –∞–∫–∞—É–Ω—Ç–∏")
        list_frame.pack(fill='both', expand=True, padx=20, pady=10)
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è Treeview –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∞–∫–∞—É–Ω—Ç—ñ–≤
        tree_frame = tk.Frame(list_frame, bg=ModernStyle.COLORS['card'])
        tree_frame.pack(fill='both', expand=True, padx=20, pady=(0, 20))
        
        columns = ('–õ–æ–≥—ñ–Ω', '–ü—Ä–æ–∫—Å—ñ', '–°—Ç–∞—Ç—É—Å')
        self.accounts_tree = ttk.Treeview(
            tree_frame,
            columns=columns,
            show='headings',
            height=8
        )
        
        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–æ–ª–æ–Ω–æ–∫
        for col in columns:
            self.accounts_tree.heading(col, text=col)
            self.accounts_tree.column(col, width=150)
        
        # –°—Ç–∏–ª—ñ–∑–∞—Ü—ñ—è Treeview
        style = ttk.Style()
        style.configure("Treeview", 
                       background=ModernStyle.COLORS['background'],
                       foreground=ModernStyle.COLORS['text'],
                       fieldbackground=ModernStyle.COLORS['background'])
        style.configure("Treeview.Heading", 
                       background=ModernStyle.COLORS['card'],
                       foreground=ModernStyle.COLORS['text'])
        
        # –°–∫—Ä–æ–ª–±–∞—Ä
        tree_scrollbar = ttk.Scrollbar(tree_frame, orient="vertical", command=self.accounts_tree.yview)
        self.accounts_tree.configure(yscrollcommand=tree_scrollbar.set)
        
        self.accounts_tree.pack(side='left', fill='both', expand=True)
        tree_scrollbar.pack(side='right', fill='y')
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è
        control_frame = tk.Frame(list_frame, bg=ModernStyle.COLORS['card'])
        control_frame.pack(fill='x', padx=20, pady=(0, 20))
        
        AnimatedButton(
            control_frame,
            text="üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏",
            command=self.remove_account,
            bg=ModernStyle.COLORS['error']
        ).pack(side='left', padx=5)
        
        AnimatedButton(
            control_frame,
            text="‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏",
            command=self.edit_account,
            bg=ModernStyle.COLORS['warning']
        ).pack(side='left', padx=5)
        
        AnimatedButton(
            control_frame,
            text="üìÅ –Ü–º–ø–æ—Ä—Ç –∑ —Ñ–∞–π–ª—É",
            command=self.import_accounts,
            bg=ModernStyle.COLORS['primary']
        ).pack(side='left', padx=5)
        
        AnimatedButton(
            control_frame,
            text="üíæ –ï–∫—Å–ø–æ—Ä—Ç",
            command=self.export_accounts,
            bg=ModernStyle.COLORS['primary']
        ).pack(side='right', padx=5)
    
    def add_account(self):
        """–î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∞–∫–∞—É–Ω—Ç—É"""
        username = self.username_var.get().strip()
        password = self.password_var.get().strip()
        proxy = self.proxy_var.get().strip()
        
        if not username or not password:
            messagebox.showwarning("–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è", "–í–≤–µ–¥—ñ—Ç—å –ª–æ–≥—ñ–Ω —Ç–∞ –ø–∞—Ä–æ–ª—å")
            return
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –∞–∫–∞—É–Ω—Ç –≤–∂–µ —ñ—Å–Ω—É—î
        for account in self.accounts:
            if account['username'] == username:
                messagebox.showwarning("–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è", "–ê–∫–∞—É–Ω—Ç –≤–∂–µ —ñ—Å–Ω—É—î")
                return
        
        account = {
            'username': username,
            'password': password,
            'proxy': proxy if proxy else None,
            'status': 'active',
            'added_at': datetime.now().isoformat()
        }
        
        self.accounts.append(account)
        self.update_accounts_display()
        self.save_accounts()
        
        # –û—á–∏—â–µ–Ω–Ω—è –ø–æ–ª—ñ–≤
        self.username_var.set("")
        self.password_var.set("")
        self.proxy_var.set("")
        
        messagebox.showinfo("–£—Å–ø—ñ—Ö", "–ê–∫–∞—É–Ω—Ç –¥–æ–¥–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ")
    
    def remove_account(self):
        """–í–∏–¥–∞–ª–µ–Ω–Ω—è –∞–∫–∞—É–Ω—Ç—É"""
        selection = self.accounts_tree.selection()
        if not selection:
            messagebox.showwarning("–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è", "–í–∏–±–µ—Ä—ñ—Ç—å –∞–∫–∞—É–Ω—Ç –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è")
            return
        
        if messagebox.askyesno("–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è", "–í–∏–¥–∞–ª–∏—Ç–∏ –≤–∏–±—Ä–∞–Ω–∏–π –∞–∫–∞—É–Ω—Ç?"):
            item = selection[0]
            index = self.accounts_tree.index(item)
            self.accounts.pop(index)
            self.update_accounts_display()
            self.save_accounts()
    
    def edit_account(self):
        """–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∞–∫–∞—É–Ω—Ç—É"""
        selection = self.accounts_tree.selection()
        if not selection:
            messagebox.showwarning("–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è", "–í–∏–±–µ—Ä—ñ—Ç—å –∞–∫–∞—É–Ω—Ç –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è")
            return
        
        item = selection[0]
        index = self.accounts_tree.index(item)
        account = self.accounts[index]
        
        # –ó–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –ø–æ–ª—ñ–≤ –ø–æ—Ç–æ—á–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏
        self.username_var.set(account['username'])
        self.password_var.set(account['password'])
        self.proxy_var.set(account.get('proxy', ''))
        
        # –í–∏–¥–∞–ª–µ–Ω–Ω—è —Å—Ç–∞—Ä–æ–≥–æ –∞–∫–∞—É–Ω—Ç—É
        self.accounts.pop(index)
        self.update_accounts_display()
    
    def import_accounts(self):
        """–Ü–º–ø–æ—Ä—Ç –∞–∫–∞—É–Ω—Ç—ñ–≤ –∑ —Ñ–∞–π–ª—É"""
        filename = filedialog.askopenfilename(
            filetypes=[("Text files", "*.txt"), ("JSON files", "*.json")],
            title="–Ü–º–ø–æ—Ä—Ç –∞–∫–∞—É–Ω—Ç—ñ–≤"
        )
        
        if not filename:
            return
        
        try:
            with open(filename, 'r', encoding='utf-8') as f:
                if filename.endswith('.json'):
                    data = json.load(f)
                    if isinstance(data, list):
                        imported = 0
                        for account_data in data:
                            if isinstance(account_data, dict) and 'username' in account_data and 'password' in account_data:
                                # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –∞–∫–∞—É–Ω—Ç –≤–∂–µ —ñ—Å–Ω—É—î
                                exists = any(acc['username'] == account_data['username'] for acc in self.accounts)
                                if not exists:
                                    self.accounts.append({
                                        'username': account_data['username'],
                                        'password': account_data['password'],
                                        'proxy': account_data.get('proxy'),
                                        'status': 'active',
                                        'added_at': datetime.now().isoformat()
                                    })
                                    imported += 1
                else:
                    # –¢–µ–∫—Å—Ç–æ–≤–∏–π —Ñ–æ—Ä–º–∞—Ç: username:password:proxy
                    lines = f.readlines()
                    imported = 0
                    for line in lines:
                        line = line.strip()
                        if line and not line.startswith('#'):
                            parts = line.split(':')
                            if len(parts) >= 2:
                                username = parts[0]
                                password = parts[1]
                                proxy = ':'.join(parts[2:]) if len(parts) > 2 else None
                                
                                # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –∞–∫–∞—É–Ω—Ç –≤–∂–µ —ñ—Å–Ω—É—î
                                exists = any(acc['username'] == username for acc in self.accounts)
                                if not exists:
                                    self.accounts.append({
                                        'username': username,
                                        'password': password,
                                        'proxy': proxy,
                                        'status': 'active',
                                        'added_at': datetime.now().isoformat()
                                    })
                                    imported += 1
                
                self.update_accounts_display()
                self.save_accounts()
                messagebox.showinfo("–£—Å–ø—ñ—Ö", f"–Ü–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ {imported} –∞–∫–∞—É–Ω—Ç—ñ–≤")
                
        except Exception as e:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", f"–ù–µ –≤–¥–∞–ª–æ—Å—è —ñ–º–ø–æ—Ä—Ç—É–≤–∞—Ç–∏: {e}")
    
    def export_accounts(self):
        """–ï–∫—Å–ø–æ—Ä—Ç –∞–∫–∞—É–Ω—Ç—ñ–≤"""
        if not self.accounts:
            messagebox.showwarning("–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è", "–ù–µ–º–∞—î –∞–∫–∞—É–Ω—Ç—ñ–≤ –¥–ª—è –µ–∫—Å–ø–æ—Ä—Ç—É")
            return
        
        filename = filedialog.asksaveasfilename(
            defaultextension=".json",
            filetypes=[("JSON files", "*.json"), ("Text files", "*.txt")],
            title="–ï–∫—Å–ø–æ—Ä—Ç –∞–∫–∞—É–Ω—Ç—ñ–≤"
        )
        
        if not filename:
            return
        
        try:
            with open(filename, 'w', encoding='utf-8') as f:
                if filename.endswith('.json'):
                    json.dump(self.accounts, f, indent=2, ensure_ascii=False)
                else:
                    for account in self.accounts:
                        line = f"{account['username']}:{account['password']}"
                        if account.get('proxy'):
                            line += f":{account['proxy']}"
                        f.write(line + '\n')
            
            messagebox.showinfo("–£—Å–ø—ñ—Ö", f"–ê–∫–∞—É–Ω—Ç–∏ –µ–∫—Å–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ: {filename}")
            
        except Exception as e:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", f"–ù–µ –≤–¥–∞–ª–æ—Å—è –µ–∫—Å–ø–æ—Ä—Ç—É–≤–∞—Ç–∏: {e}")
    
    def update_accounts_display(self):
        """–û–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∞–∫–∞—É–Ω—Ç—ñ–≤"""
        # –û—á–∏—â–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ
        for item in self.accounts_tree.get_children():
            self.accounts_tree.delete(item)
        
        # –î–æ–¥–∞–≤–∞–Ω–Ω—è –∞–∫–∞—É–Ω—Ç—ñ–≤
        for account in self.accounts:
            proxy_display = account.get('proxy', '–ù–µ–º–∞—î')[:20] + "..." if account.get('proxy') and len(account.get('proxy', '')) > 20 else account.get('proxy', '–ù–µ–º–∞—î')
            
            self.accounts_tree.insert('', 'end', values=(
                account['username'],
                proxy_display,
                account.get('status', 'active')
            ))
    
    def save_accounts(self):
        """–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∞–∫–∞—É–Ω—Ç—ñ–≤"""
        try:
            os.makedirs('data', exist_ok=True)
            with open('data/accounts.json', 'w', encoding='utf-8') as f:
                json.dump(self.accounts, f, indent=2, ensure_ascii=False)
        except Exception as e:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ –∞–∫–∞—É–Ω—Ç–∏: {e}")
    
    def load_accounts(self):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –∞–∫–∞—É–Ω—Ç—ñ–≤"""
        try:
            if os.path.exists('data/accounts.json'):
                with open('data/accounts.json', 'r', encoding='utf-8') as f:
                    self.accounts = json.load(f)
                self.update_accounts_display()
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∞–∫–∞—É–Ω—Ç—ñ–≤: {e}")
    
    def get_accounts(self):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –∞–∫–∞—É–Ω—Ç—ñ–≤"""
        return self.accounts


class TargetManagerWidget(tk.Frame):
    """–í—ñ–¥–∂–µ—Ç —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Ü—ñ–ª—è–º–∏"""
    
    def __init__(self, parent, **kwargs):
        super().__init__(parent, **kwargs)
        self.configure(bg=ModernStyle.COLORS['surface'])
        
        self.targets = []
        self.create_widgets()
        self.load_targets()
    
    def create_widgets(self):
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—ñ–¥–∂–µ—Ç—ñ–≤"""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header = tk.Label(
            self,
            text="üéØ –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Ü—ñ–ª—è–º–∏",
            font=ModernStyle.FONTS['heading'],
            bg=ModernStyle.COLORS['surface'],
            fg=ModernStyle.COLORS['text']
        )
        header.pack(pady=10)
        
        # –§–æ—Ä–º–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ü—ñ–ª—ñ
        add_frame = GlassCard(self, title="–î–æ–¥–∞—Ç–∏ –Ω–æ–≤—ñ —Ü—ñ–ª—ñ")
        add_frame.pack(fill='x', padx=20, pady=10)
        
        form_frame = tk.Frame(add_frame, bg=ModernStyle.COLORS['card'])
        form_frame.pack(fill='x', padx=20, pady=(0, 20))
        
        # –ü–æ–ª–µ –≤–≤–µ–¥–µ–Ω–Ω—è
        tk.Label(
            form_frame,
            text="Username (–±–µ–∑ @):",
            font=ModernStyle.FONTS['body'],
            bg=ModernStyle.COLORS['card'],
            fg=ModernStyle.COLORS['text']
        ).pack(anchor='w')
        
        self.target_var = tk.StringVar()
        target_entry = tk.Entry(
            form_frame,
            textvariable=self.target_var,
            font=ModernStyle.FONTS['body'],
            bg=ModernStyle.COLORS['surface'],
            fg=ModernStyle.COLORS['text'],
            insertbackground=ModernStyle.COLORS['text']
        )
        target_entry.pack(fill='x', pady=5)
        target_entry.bind('<Return>', lambda e: self.add_target())
        
        # –ú–∞—Å–æ–≤–µ –¥–æ–¥–∞–≤–∞–Ω–Ω—è
        tk.Label(
            form_frame,
            text="–ê–±–æ –¥–æ–¥–∞–π—Ç–µ –∫—ñ–ª—å–∫–∞ —Ü—ñ–ª–µ–π (–ø–æ –æ–¥–Ω—ñ–π –Ω–∞ —Ä—è–¥–æ–∫):",
            font=ModernStyle.FONTS['body'],
            bg=ModernStyle.COLORS['card'],
            fg=ModernStyle.COLORS['text']
        ).pack(anchor='w', pady=(10, 0))
        
        self.bulk_text = scrolledtext.ScrolledText(
            form_frame,
            height=4,
            font=ModernStyle.FONTS['body'],
            bg=ModernStyle.COLORS['surface'],
            fg=ModernStyle.COLORS['text'],
            insertbackground=ModernStyle.COLORS['text'],
            wrap=tk.WORD
        )
        self.bulk_text.pack(fill='x', pady=5)
        
        # –ö–Ω–æ–ø–∫–∏
        btn_frame = tk.Frame(form_frame, bg=ModernStyle.COLORS['card'])
        btn_frame.pack(fill='x', pady=10)
        
        AnimatedButton(
            btn_frame,
            text="‚ûï –î–æ–¥–∞—Ç–∏ —Ü—ñ–ª—å",
            command=self.add_target,
            bg=ModernStyle.COLORS['success']
        ).pack(side='left', padx=5)
        
        AnimatedButton(
            btn_frame,
            text="üìù –î–æ–¥–∞—Ç–∏ –≤—Å—ñ",
            command=self.add_bulk_targets,
            bg=ModernStyle.COLORS['primary']
        ).pack(side='left', padx=5)
        
        # –°–ø–∏—Å–æ–∫ —Ü—ñ–ª–µ–π
        list_frame = GlassCard(self, title="–ó–±–µ—Ä–µ–∂–µ–Ω—ñ —Ü—ñ–ª—ñ")
        list_frame.pack(fill='both', expand=True, padx=20, pady=10)
        
        # Listbox –¥–ª—è —Ü—ñ–ª–µ–π
        targets_frame = tk.Frame(list_frame, bg=ModernStyle.COLORS['card'])
        targets_frame.pack(fill='both', expand=True, padx=20, pady=(0, 20))
        
        self.targets_listbox = tk.Listbox(
            targets_frame,
            font=ModernStyle.FONTS['body'],
            bg=ModernStyle.COLORS['background'],
            fg=ModernStyle.COLORS['text'],
            selectbackground=ModernStyle.COLORS['primary'],
            selectforeground='white',
            relief='flat',
            borderwidth=0
        )
        self.targets_listbox.pack(side='left', fill='both', expand=True)
        
        targets_scrollbar = ttk.Scrollbar(targets_frame, orient="vertical", command=self.targets_listbox.yview)
        targets_scrollbar.pack(side='right', fill='y')
        self.targets_listbox.configure(yscrollcommand=targets_scrollbar.set)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è
        control_frame = tk.Frame(list_frame, bg=ModernStyle.COLORS['card'])
        control_frame.pack(fill='x', padx=20, pady=(0, 20))
        
        AnimatedButton(
            control_frame,
            text="üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏",
            command=self.remove_target,
            bg=ModernStyle.COLORS['error']
        ).pack(side='left', padx=5)
        
        AnimatedButton(
            control_frame,
            text="üìÅ –Ü–º–ø–æ—Ä—Ç",
            command=self.import_targets,
            bg=ModernStyle.COLORS['primary']
        ).pack(side='left', padx=5)
        
        AnimatedButton(
            control_frame,
            text="üíæ –ï–∫—Å–ø–æ—Ä—Ç",
            command=self.export_targets,
            bg=ModernStyle.COLORS['primary']
        ).pack(side='right', padx=5)
        
        AnimatedButton(
            control_frame,
            text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç–∏ –≤—Å–µ",
            command=self.clear_all_targets,
            bg=ModernStyle.COLORS['error']
        ).pack(side='right', padx=5)
    
    def add_target(self):
        """–î–æ–¥–∞–≤–∞–Ω–Ω—è —Ü—ñ–ª—ñ"""
        target = self.target_var.get().strip().replace('@', '')
        
        if not target:
            messagebox.showwarning("–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è", "–í–≤–µ–¥—ñ—Ç—å username")
            return
        
        if target in self.targets:
            messagebox.showwarning("–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è", "–¶—ñ–ª—å –≤–∂–µ —ñ—Å–Ω—É—î")
            return
        
        self.targets.append(target)
        self.update_targets_display()
        self.save_targets()
        self.target_var.set("")
    
    def add_bulk_targets(self):
        """–ú–∞—Å–æ–≤–µ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ü—ñ–ª–µ–π"""
        text = self.bulk_text.get('1.0', tk.END).strip()
        if not text:
            messagebox.showwarning("–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è", "–í–≤–µ–¥—ñ—Ç—å —Ü—ñ–ª—ñ")
            return
        
        lines = text.split('\n')
        added = 0
        
        for line in lines:
            target = line.strip().replace('@', '')
            if target and target not in self.targets:
                self.targets.append(target)
                added += 1
        
        if added > 0:
            self.update_targets_display()
            self.save_targets()
            self.bulk_text.delete('1.0', tk.END)
            messagebox.showinfo("–£—Å–ø—ñ—Ö", f"–î–æ–¥–∞–Ω–æ {added} —Ü—ñ–ª–µ–π")
        else:
            messagebox.showwarning("–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è", "–ù–æ–≤—ñ —Ü—ñ–ª—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
    
    def remove_target(self):
        """–í–∏–¥–∞–ª–µ–Ω–Ω—è —Ü—ñ–ª—ñ"""
        selection = self.targets_listbox.curselection()
        if not selection:
            messagebox.showwarning("–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è", "–í–∏–±–µ—Ä—ñ—Ç—å —Ü—ñ–ª—å –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è")
            return
        
        index = selection[0]
        self.targets.pop(index)
        self.update_targets_display()
        self.save_targets()
    
    def clear_all_targets(self):
        """–û—á–∏—â–µ–Ω–Ω—è –≤—Å—ñ—Ö —Ü—ñ–ª–µ–π"""
        if messagebox.askyesno("–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è", "–í–∏–¥–∞–ª–∏—Ç–∏ –≤—Å—ñ —Ü—ñ–ª—ñ?"):
            self.targets.clear()
            self.update_targets_display()
            self.save_targets()
    
    def import_targets(self):
        """–Ü–º–ø–æ—Ä—Ç —Ü—ñ–ª–µ–π –∑ —Ñ–∞–π–ª—É"""
        filename = filedialog.askopenfilename(
            filetypes=[("Text files", "*.txt"), ("JSON files", "*.json")],
            title="–Ü–º–ø–æ—Ä—Ç —Ü—ñ–ª–µ–π"
        )
        
        if not filename:
            return
        
        try:
            with open(filename, 'r', encoding='utf-8') as f:
                if filename.endswith('.json'):
                    data = json.load(f)
                    if isinstance(data, list):
                        imported = 0
                        for target in data:
                            target = str(target).strip().replace('@', '')
                            if target and target not in self.targets:
                                self.targets.append(target)
                                imported += 1
                else:
                    lines = f.readlines()
                    imported = 0
                    for line in lines:
                        target = line.strip().replace('@', '')
                        if target and not target.startswith('#') and target not in self.targets:
                            self.targets.append(target)
                            imported += 1
                
                self.update_targets_display()
                self.save_targets()
                messagebox.showinfo("–£—Å–ø—ñ—Ö", f"–Ü–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ {imported} —Ü—ñ–ª–µ–π")
                
        except Exception as e:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", f"–ù–µ –≤–¥–∞–ª–æ—Å—è —ñ–º–ø–æ—Ä—Ç—É–≤–∞—Ç–∏: {e}")
    
    def export_targets(self):
        """–ï–∫—Å–ø–æ—Ä—Ç —Ü—ñ–ª–µ–π"""
        if not self.targets:
            messagebox.showwarning("–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è", "–ù–µ–º–∞—î —Ü—ñ–ª–µ–π –¥–ª—è –µ–∫—Å–ø–æ—Ä—Ç—É")
            return
        
        filename = filedialog.asksaveasfilename(
            defaultextension=".txt",
            filetypes=[("Text files", "*.txt"), ("JSON files", "*.json")],
            title="–ï–∫—Å–ø–æ—Ä—Ç —Ü—ñ–ª–µ–π"
        )
        
        if not filename:
            return
        
        try:
            with open(filename, 'w', encoding='utf-8') as f:
                if filename.endswith('.json'):
                    json.dump(self.targets, f, indent=2, ensure_ascii=False)
                else:
                    for target in self.targets:
                        f.write(target + '\n')
            
            messagebox.showinfo("–£—Å–ø—ñ—Ö", f"–¶—ñ–ª—ñ –µ–∫—Å–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ: {filename}")
            
        except Exception as e:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", f"–ù–µ –≤–¥–∞–ª–æ—Å—è –µ–∫—Å–ø–æ—Ä—Ç—É–≤–∞—Ç–∏: {e}")
    
    def update_targets_display(self):
        """–û–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ü—ñ–ª–µ–π"""
        self.targets_listbox.delete(0, tk.END)
        for i, target in enumerate(self.targets):
            self.targets_listbox.insert(tk.END, f"{i+1}. @{target}")
    
    def save_targets(self):
        """–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ü—ñ–ª–µ–π"""
        try:
            os.makedirs('data', exist_ok=True)
            with open('data/targets.json', 'w', encoding='utf-8') as f:
                json.dump(self.targets, f, indent=2, ensure_ascii=False)
        except Exception as e:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ —Ü—ñ–ª—ñ: {e}")
    
    def load_targets(self):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö —Ü—ñ–ª–µ–π"""
        try:
            if os.path.exists('data/targets.json'):
                with open('data/targets.json', 'r', encoding='utf-8') as f:
                    self.targets = json.load(f)
                self.update_targets_display()
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ü—ñ–ª–µ–π: {e}")
    
    def get_targets(self):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É —Ü—ñ–ª–µ–π"""
        return self.targets


class BrowserSettingsWidget(tk.Frame):
    """–í—ñ–¥–∂–µ—Ç –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –±—Ä–∞—É–∑–µ—Ä–∞"""
    
    def __init__(self, parent, **kwargs):
        super().__init__(parent, **kwargs)
        self.configure(bg=ModernStyle.COLORS['surface'])
        
        self.settings = {
            'browser_type': 'chrome',
            'headless': False,
            'proxy_enabled': True,
            'stealth_mode': True,
            'dolphin_api_url': 'http://localhost:3001/v1.0',
            'dolphin_token': ''
        }
        
        self.create_widgets()
        self.load_settings()
    
    def create_widgets(self):
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—ñ–¥–∂–µ—Ç—ñ–≤"""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header = tk.Label(
            self,
            text="üåê –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±—Ä–∞—É–∑–µ—Ä–∞",
            font=ModernStyle.FONTS['heading'],
            bg=ModernStyle.COLORS['surface'],
            fg=ModernStyle.COLORS['text']
        )
        header.pack(pady=10)
        
        # –í–∏–±—ñ—Ä —Ç–∏–ø—É –±—Ä–∞—É–∑–µ—Ä–∞
        browser_frame = GlassCard(self, title="–¢–∏–ø –±—Ä–∞—É–∑–µ—Ä–∞")
        browser_frame.pack(fill='x', padx=20, pady=10)
        
        content_frame = tk.Frame(browser_frame, bg=ModernStyle.COLORS['card'])
        content_frame.pack(fill='x', padx=20, pady=(0, 20))
        
        self.browser_var = tk.StringVar(value=self.settings['browser_type'])
        
        # Chrome –æ–ø—Ü—ñ—è
        chrome_frame = tk.Frame(content_frame, bg=ModernStyle.COLORS['surface'], relief='solid', bd=1)
        chrome_frame.pack(fill='x', pady=5)
        
        chrome_radio = tk.Radiobutton(
            chrome_frame,
            text="üåê Google Chrome (Playwright)",
            variable=self.browser_var,
            value='chrome',
            font=ModernStyle.FONTS['body'],
            bg=ModernStyle.COLORS['surface'],
            fg=ModernStyle.COLORS['text'],
            selectcolor=ModernStyle.COLORS['primary'],
            activebackground=ModernStyle.COLORS['surface'],
            command=self.on_browser_change
        )
        chrome_radio.pack(anchor='w', padx=10, pady=10)
        
        chrome_desc = tk.Label(
            chrome_frame,
            text="‚Ä¢ –ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏–π\n‚Ä¢ –®–≤–∏–¥–∫–∏–π —Ç–∞ —Å—Ç–∞–±—ñ–ª—å–Ω–∏–π\n‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π stealth —Ä–µ–∂–∏–º",
            font=ModernStyle.FONTS['small'],
            bg=ModernStyle.COLORS['surface'],
            fg=ModernStyle.COLORS['text_secondary'],
            justify='left'
        )
        chrome_desc.pack(anchor='w', padx=30, pady=(0, 10))
        
        # Dolphin –æ–ø—Ü—ñ—è
        dolphin_frame = tk.Frame(content_frame, bg=ModernStyle.COLORS['surface'], relief='solid', bd=1)
        dolphin_frame.pack(fill='x', pady=5)
        
        dolphin_radio = tk.Radiobutton(
            dolphin_frame,
            text="üê¨ Dolphin Anty Browser",
            variable=self.browser_var,
            value='dolphin',
            font=ModernStyle.FONTS['body'],
            bg=ModernStyle.COLORS['surface'],
            fg=ModernStyle.COLORS['text'],
            selectcolor=ModernStyle.COLORS['primary'],
            activebackground=ModernStyle.COLORS['surface'],
            command=self.on_browser_change
        )
        dolphin_radio.pack(anchor='w', padx=10, pady=10)
        
        dolphin_desc = tk.Label(
            dolphin_frame,
            text="‚Ä¢ –ü—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∏–π –∞–Ω—Ç–∏–¥–µ—Ç–µ–∫—Ç\n‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω—ñ –ø—Ä–æ–∫—Å—ñ –ø—Ä–æ—Ñ—ñ–ª—ñ\n‚Ä¢ –ù–∞–π–∫—Ä–∞—â–∏–π –æ–±—Ö—ñ–¥ –±–ª–æ–∫—É–≤–∞–Ω—å",
            font=ModernStyle.FONTS['small'],
            bg=ModernStyle.COLORS['surface'],
            fg=ModernStyle.COLORS['text_secondary'],
            justify='left'
        )
        dolphin_desc.pack(anchor='w', padx=30, pady=(0, 10))
        
        # –ó–∞–≥–∞–ª—å–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
        general_frame = GlassCard(self, title="–ó–∞–≥–∞–ª—å–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è")
        general_frame.pack(fill='x', padx=20, pady=10)
        
        gen_content = tk.Frame(general_frame, bg=ModernStyle.COLORS['card'])
        gen_content.pack(fill='x', padx=20, pady=(0, 20))
        
        # Headless —Ä–µ–∂–∏–º
        self.headless_var = tk.BooleanVar(value=self.settings['headless'])
        headless_check = tk.Checkbutton(
            gen_content,
            text="Headless —Ä–µ–∂–∏–º (–±–µ–∑ –≥—Ä–∞—Ñ—ñ—á–Ω–æ–≥–æ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É)",
            variable=self.headless_var,
            font=ModernStyle.FONTS['body'],
            bg=ModernStyle.COLORS['card'],
            fg=ModernStyle.COLORS['text'],
            selectcolor=ModernStyle.COLORS['surface'],
            command=self.save_settings
        )
        headless_check.pack(anchor='w', pady=5)
        
        # Stealth —Ä–µ–∂–∏–º
        self.stealth_var = tk.BooleanVar(value=self.settings['stealth_mode'])
        stealth_check = tk.Checkbutton(
            gen_content,
            text="Stealth —Ä–µ–∂–∏–º (–æ–±—Ö—ñ–¥ –¥–µ—Ç–µ–∫—Ü—ñ—ó)",
            variable=self.stealth_var,
            font=ModernStyle.FONTS['body'],
            bg=ModernStyle.COLORS['card'],
            fg=ModernStyle.COLORS['text'],
            selectcolor=ModernStyle.COLORS['surface'],
            command=self.save_settings
        )
        stealth_check.pack(anchor='w', pady=5)
        
        # –ü—Ä–æ–∫—Å—ñ
        self.proxy_var = tk.BooleanVar(value=self.settings['proxy_enabled'])
        proxy_check = tk.Checkbutton(
            gen_content,
            text="–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –ø—Ä–æ–∫—Å—ñ",
            variable=self.proxy_var,
            font=ModernStyle.FONTS['body'],
            bg=ModernStyle.COLORS['card'],
            fg=ModernStyle.COLORS['text'],
            selectcolor=ModernStyle.COLORS['surface'],
            command=self.save_settings
        )
        proxy_check.pack(anchor='w', pady=5)
        
        # Dolphin –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
        self.dolphin_frame = GlassCard(self, title="–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Dolphin Anty")
        self.dolphin_frame.pack(fill='x', padx=20, pady=10)
        
        dolphin_content = tk.Frame(self.dolphin_frame, bg=ModernStyle.COLORS['card'])
        dolphin_content.pack(fill='x', padx=20, pady=(0, 20))
        
        # API URL
        tk.Label(
            dolphin_content,
            text="API URL:",
            font=ModernStyle.FONTS['body'],
            bg=ModernStyle.COLORS['card'],
            fg=ModernStyle.COLORS['text']
        ).pack(anchor='w', pady=(5, 0))
        
        self.api_url_var = tk.StringVar(value=self.settings['dolphin_api_url'])
        api_url_entry = tk.Entry(
            dolphin_content,
            textvariable=self.api_url_var,
            font=ModernStyle.FONTS['body'],
            bg=ModernStyle.COLORS['surface'],
            fg=ModernStyle.COLORS['text'],
            insertbackground=ModernStyle.COLORS['text']
        )
        api_url_entry.pack(fill='x', pady=5)
        api_url_entry.bind('<KeyRelease>', lambda e: self.save_settings())
        
        # API Token
        tk.Label(
            dolphin_content,
            text="API Token:",
            font=ModernStyle.FONTS['body'],
            bg=ModernStyle.COLORS['card'],
            fg=ModernStyle.COLORS['text']
        ).pack(anchor='w', pady=(10, 0))
        
        self.api_token_var = tk.StringVar(value=self.settings['dolphin_token'])
        api_token_entry = tk.Entry(
            dolphin_content,
            textvariable=self.api_token_var,
            show='*',
            font=ModernStyle.FONTS['body'],
            bg=ModernStyle.COLORS['surface'],
            fg=ModernStyle.COLORS['text'],
            insertbackground=ModernStyle.COLORS['text']
        )
        api_token_entry.pack(fill='x', pady=5)
        api_token_entry.bind('<KeyRelease>', lambda e: self.save_settings())
        
        # –ö–Ω–æ–ø–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
        AnimatedButton(
            dolphin_content,
            text="üîç –¢–µ—Å—Ç –∑'—î–¥–Ω–∞–Ω–Ω—è",
            command=self.test_dolphin_connection,
            bg=ModernStyle.COLORS['primary']
        ).pack(pady=10)
        
        # –ü–æ–∫–∞–∑–∞—Ç–∏/–ø—Ä–∏—Ö–æ–≤–∞—Ç–∏ Dolphin –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
        self.on_browser_change()
    
    def on_browser_change(self):
        """–û–±—Ä–æ–±–∫–∞ –∑–º—ñ–Ω–∏ —Ç–∏–ø—É –±—Ä–∞—É–∑–µ—Ä–∞"""
        browser_type = self.browser_var.get()
        
        if browser_type == 'dolphin':
            self.dolphin_frame.pack(fill='x', padx=20, pady=10)
        else:
            self.dolphin_frame.pack_forget()
        
        self.settings['browser_type'] = browser_type
        self.save_settings()
    
    def test_dolphin_connection(self):
        """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ Dolphin"""
        def test_worker():
            try:
                import requests
                
                url = self.api_url_var.get()
                token = self.api_token_var.get()
                
                if not url or not token:
                    messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "–í–≤–µ–¥—ñ—Ç—å URL —Ç–∞ Token")
                    return
                
                headers = {'Authorization': f'Bearer {token}'}
                response = requests.get(f'{url}/browser_profiles', headers=headers, timeout=10)
                
                if response.status_code == 200:
                    messagebox.showinfo("–£—Å–ø—ñ—Ö", "–ó'—î–¥–Ω–∞–Ω–Ω—è –∑ Dolphin API —É—Å–ø—ñ—à–Ω–µ!")
                else:
                    messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", f"–ü–æ–º–∏–ª–∫–∞ API: {response.status_code}")
                    
            except Exception as e:
                messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", f"–ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è: {e}")
        
        # –ó–∞–ø—É—Å–∫ –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ
        thread = threading.Thread(target=test_worker, daemon=True)
        thread.start()
    
    def save_settings(self):
        """–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å"""
        self.settings = {
            'browser_type': self.browser_var.get(),
            'headless': self.headless_var.get(),
            'proxy_enabled': self.proxy_var.get(),
            'stealth_mode': self.stealth_var.get(),
            'dolphin_api_url': self.api_url_var.get(),
            'dolphin_token': self.api_token_var.get()
        }
        
        try:
            os.makedirs('data', exist_ok=True)
            with open('data/browser_settings.json', 'w', encoding='utf-8') as f:
                json.dump(self.settings, f, indent=2, ensure_ascii=False)
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –±—Ä–∞—É–∑–µ—Ä–∞: {e}")
    
    def load_settings(self):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å"""
        try:
            if os.path.exists('data/browser_settings.json'):
                with open('data/browser_settings.json', 'r', encoding='utf-8') as f:
                    loaded_settings = json.load(f)
                    self.settings.update(loaded_settings)
                
                # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
                self.browser_var.set(self.settings['browser_type'])
                self.headless_var.set(self.settings['headless'])
                self.proxy_var.set(self.settings['proxy_enabled'])
                self.stealth_var.set(self.settings['stealth_mode'])
                self.api_url_var.set(self.settings['dolphin_api_url'])
                self.api_token_var.set(self.settings['dolphin_token'])
                
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –±—Ä–∞—É–∑–µ—Ä–∞: {e}")
    
    def get_settings(self):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–∏—Ö –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å"""
        return self.settings


class WorkerStatusWidget(tk.Frame):
    """–í—ñ–¥–∂–µ—Ç —Å—Ç–∞—Ç—É—Å—É –≤–æ—Ä–∫–µ—Ä–∞"""
    
    def __init__(self, parent, worker_id, **kwargs):
        super().__init__(parent, **kwargs)
        self.configure(bg=ModernStyle.COLORS['card'])
        
        self.worker_id = worker_id
        self.status = 'idle'
        self.stats = {
            'processed_accounts': 0,
            'total_actions': 0,
            'successful_actions': 0,
            'errors': 0
        }
        
        self.create_widgets()
    
    def create_widgets(self):
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—ñ–¥–∂–µ—Ç—ñ–≤"""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –≤–æ—Ä–∫–µ—Ä–∞
        header_frame = tk.Frame(self, bg=ModernStyle.COLORS['card'])
        header_frame.pack(fill='x', padx=10, pady=5)
        
        self.status_dot = tk.Label(
            header_frame,
            text="‚óè",
            font=('Arial', 16),
            bg=ModernStyle.COLORS['card'],
            fg=ModernStyle.COLORS['text_secondary']
        )
        self.status_dot.pack(side='left')
        
        tk.Label(
            header_frame,
            text=f"–í–æ—Ä–∫–µ—Ä #{self.worker_id + 1}",
            font=ModernStyle.FONTS['body'],
            bg=ModernStyle.COLORS['card'],
            fg=ModernStyle.COLORS['text']
        ).pack(side='left', padx=(5, 0))
        
        self.status_label = tk.Label(
            header_frame,
            text="–û—á—ñ–∫—É–≤–∞–Ω–Ω—è",
            font=ModernStyle.FONTS['small'],
            bg=ModernStyle.COLORS['card'],
            fg=ModernStyle.COLORS['text_secondary']
        )
        self.status_label.pack(side='right')
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats_frame = tk.Frame(self, bg=ModernStyle.COLORS['card'])
        stats_frame.pack(fill='x', padx=10, pady=(0, 5))
        
        self.stats_labels = {}
        stats_items = [
            ('–ê–∫–∞—É–Ω—Ç—ñ–≤:', 'processed_accounts'),
            ('–î—ñ–π:', 'total_actions'),
            ('–£—Å–ø—ñ—à–Ω–∏—Ö:', 'successful_actions'),
            ('–ü–æ–º–∏–ª–æ–∫:', 'errors')
        ]
        
        for i, (label_text, stat_key) in enumerate(stats_items):
            row = i // 2
            col = i % 2
            
            item_frame = tk.Frame(stats_frame, bg=ModernStyle.COLORS['card'])
            item_frame.grid(row=row, column=col, sticky='ew', padx=2, pady=1)
            
            tk.Label(
                item_frame,
                text=label_text,
                font=ModernStyle.FONTS['small'],
                bg=ModernStyle.COLORS['card'],
                fg=ModernStyle.COLORS['text_secondary']
            ).pack(side='left')
            
            value_label = tk.Label(
                item_frame,
                text="0",
                font=ModernStyle.FONTS['small'],
                bg=ModernStyle.COLORS['card'],
                fg=ModernStyle.COLORS['text']
            )
            value_label.pack(side='right')
            
            self.stats_labels[stat_key] = value_label
        
        stats_frame.grid_columnconfigure(0, weight=1)
        stats_frame.grid_columnconfigure(1, weight=1)
    
    def update_status(self, status, current_account=None):
        """–û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –≤–æ—Ä–∫–µ—Ä–∞"""
        self.status = status
        
        status_colors = {
            'idle': ModernStyle.COLORS['text_secondary'],
            'working': ModernStyle.COLORS['success'],
            'error': ModernStyle.COLORS['error'],
            'paused': ModernStyle.COLORS['warning']
        }
        
        status_texts = {
            'idle': '–û—á—ñ–∫—É–≤–∞–Ω–Ω—è',
            'working': f'–ü—Ä–∞—Ü—é—î: {current_account}' if current_account else '–ê–∫—Ç–∏–≤–Ω–∏–π',
            'error': '–ü–æ–º–∏–ª–∫–∞',
            'paused': '–ü–∞—É–∑–∞'
        }
        
        self.status_dot.configure(fg=status_colors.get(status, status_colors['idle']))
        self.status_label.configure(text=status_texts.get(status, '–ù–µ–≤—ñ–¥–æ–º–æ'))
    
    def update_stats(self, stats):
        """–û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤–æ—Ä–∫–µ—Ä–∞"""
        self.stats.update(stats)
        
        for stat_key, value in self.stats.items():
            if stat_key in self.stats_labels:
                self.stats_labels[stat_key].configure(text=str(value))


class InstagramBotGUI:
    """–ì–æ–ª–æ–≤–Ω–∏–π –∫–ª–∞—Å GUI"""
    
    def __init__(self, root):
        self.root = root
        self.data_manager = DataManager()
        self.automation_manager = None
        self.worker_widgets = []
        
        self.setup_window()
        self.create_widgets()
        self.load_all_data()
    
    def setup_window(self):
        """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≥–æ–ª–æ–≤–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞"""
        self.root.title("Instagram Bot Pro v3.0 - –ü—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—è")
        self.root.geometry("1600x1000")
        self.root.configure(bg=ModernStyle.COLORS['background'])
        
        # –¶–µ–Ω—Ç—Ä—É–≤–∞–Ω–Ω—è –≤—ñ–∫–Ω–∞
        self.root.update_idletasks()
        x = (self.root.winfo_screenwidth() // 2) - (1600 // 2)
        y = (self.root.winfo_screenheight() // 2) - (1000 // 2)
        self.root.geometry(f"1600x1000+{x}+{y}")
        
        self.root.protocol("WM_DELETE_WINDOW", self.on_closing)
    
    def create_widgets(self):
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—ñ–¥–∂–µ—Ç—ñ–≤ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É"""
        # –ì–æ–ª–æ–≤–Ω–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_container = tk.Frame(self.root, bg=ModernStyle.COLORS['background'])
        main_container.pack(fill='both', expand=True)
        
        # –ë—ñ—á–Ω–∞ –ø–∞–Ω–µ–ª—å
        sidebar = tk.Frame(main_container, bg=ModernStyle.COLORS['sidebar'], width=300)
        sidebar.pack(side='left', fill='y')
        sidebar.pack_propagate(False)
        
        # –õ–æ–≥–æ—Ç–∏–ø
        logo_frame = tk.Frame(sidebar, bg=ModernStyle.COLORS['sidebar'])
        logo_frame.pack(fill='x', pady=20)
        
        tk.Label(
            logo_frame,
            text="ü§ñ Instagram Bot Pro",
            font=ModernStyle.FONTS['title'],
            bg=ModernStyle.COLORS['sidebar'],
            fg=ModernStyle.COLORS['text']
        ).pack()
        
        tk.Label(
            logo_frame,
            text="v3.0 Multi-Worker Edition",
            font=ModernStyle.FONTS['small'],
            bg=ModernStyle.COLORS['sidebar'],
            fg=ModernStyle.COLORS['text_secondary']
        ).pack()
        
        # –ù–∞–≤—ñ–≥–∞—Ü—ñ—è
        nav_frame = tk.Frame(sidebar, bg=ModernStyle.COLORS['sidebar'])
        nav_frame.pack(fill='x', padx=10, pady=20)
        
        self.nav_buttons = {}
        nav_items = [
            ("üè†", "–ì–æ–ª–æ–≤–Ω–∞", "main"),
            ("üë•", "–ê–∫–∞—É–Ω—Ç–∏", "accounts"),
            ("üéØ", "–¶—ñ–ª—ñ", "targets"),
            ("üîó", "–õ–∞–Ω—Ü—é–∂–æ–∫ –¥—ñ–π", "chain"),
            ("üìù", "–¢–µ–∫—Å—Ç–∏", "texts"),
            ("üåê", "–ë—Ä–∞—É–∑–µ—Ä", "browser"),
            ("‚ñ∂Ô∏è", "–ó–∞–ø—É—Å–∫", "run")
        ]
        
        for icon, text, page in nav_items:
            btn = tk.Button(
                nav_frame,
                text=f"  {icon}  {text}",
                command=lambda p=page: self.show_page(p),
                font=ModernStyle.FONTS['body'],
                bg=ModernStyle.COLORS['sidebar'],
                fg=ModernStyle.COLORS['text'],
                relief='flat',
                anchor='w',
                padx=15,
                pady=10,
                cursor='hand2'
            )
            btn.pack(fill='x', pady=1)
            
            # Hover –µ—Ñ–µ–∫—Ç–∏
            btn.bind('<Enter>', lambda e, b=btn: b.configure(bg=ModernStyle.COLORS['sidebar_active']))
            btn.bind('<Leave>', lambda e, b=btn: b.configure(bg=ModernStyle.COLORS['sidebar']) if not getattr(b, 'active', False) else None)
            
            self.nav_buttons[page] = btn
        
        # –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º–∏
        status_frame = tk.Frame(sidebar, bg=ModernStyle.COLORS['sidebar'])
        status_frame.pack(side='bottom', fill='x', padx=20, pady=20)
        
        tk.Label(
            status_frame,
            text="–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º–∏:",
            font=ModernStyle.FONTS['small'],
            bg=ModernStyle.COLORS['sidebar'],
            fg=ModernStyle.COLORS['text_secondary']
        ).pack(anchor='w')
        
        self.status_label = tk.Label(
            status_frame,
            text="‚óè –ì–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–±–æ—Ç–∏",
            font=ModernStyle.FONTS['small'],
            bg=ModernStyle.COLORS['sidebar'],
            fg=ModernStyle.COLORS['success']
        )
        self.status_label.pack(anchor='w', pady=2)
        
        # –û–±–ª–∞—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç—É
        self.content_area = tk.Frame(main_container, bg=ModernStyle.COLORS['background'])
        self.content_area.pack(side='right', fill='both', expand=True)
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–æ–∫
        self.create_pages()
        
        # –ü–æ–∫–∞–∑ –≥–æ–ª–æ–≤–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏
        self.show_page("main")
    
    def create_pages(self):
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—Å—ñ—Ö —Å—Ç–æ—Ä—ñ–Ω–æ–∫"""
        self.pages = {}
        
        # –ì–æ–ª–æ–≤–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞
        self.pages["main"] = self.create_main_page()
        
        # –°—Ç–æ—Ä—ñ–Ω–∫–∞ –∞–∫–∞—É–Ω—Ç—ñ–≤
        self.pages["accounts"] = AccountManagerWidget(self.content_area)
        
        # –°—Ç–æ—Ä—ñ–Ω–∫–∞ —Ü—ñ–ª–µ–π
        self.pages["targets"] = TargetManagerWidget(self.content_area)
        
        # –°—Ç–æ—Ä—ñ–Ω–∫–∞ –ª–∞–Ω—Ü—é–∂–∫–∞ –¥—ñ–π
        self.pages["chain"] = ChainBuilderWidget(self.content_area)
        
        # –°—Ç–æ—Ä—ñ–Ω–∫–∞ —Ç–µ–∫—Å—Ç—ñ–≤
        self.pages["texts"] = TextManagerWidget(self.content_area)
        
        # –°—Ç–æ—Ä—ñ–Ω–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞
        self.pages["browser"] = BrowserSettingsWidget(self.content_area)
        
        # –°—Ç–æ—Ä—ñ–Ω–∫–∞ –∑–∞–ø—É—Å–∫—É
        self.pages["run"] = self.create_run_page()
    
    def create_main_page(self):
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥–æ–ª–æ–≤–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏"""
        page = tk.Frame(self.content_area, bg=ModernStyle.COLORS['background'])
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header = tk.Label(
            page,
            text="üè† –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è",
            font=ModernStyle.FONTS['title'],
            bg=ModernStyle.COLORS['background'],
            fg=ModernStyle.COLORS['text']
        )
        header.pack(pady=20)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏—á–Ω—ñ –∫–∞—Ä—Ç–∫–∏
        stats_frame = tk.Frame(page, bg=ModernStyle.COLORS['background'])
        stats_frame.pack(fill='x', padx=20, pady=20)
        
        # –ö–∞—Ä—Ç–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        cards_data = [
            ("üë•", "–ê–∫–∞—É–Ω—Ç—ñ–≤", "0", "accounts_count"),
            ("üéØ", "–¶—ñ–ª–µ–π", "0", "targets_count"),
            ("üîó", "–î—ñ–π –≤ –ª–∞–Ω—Ü—é–∂–∫—É", "0", "chain_count"),
            ("üìù", "–¢–µ–∫—Å—Ç—ñ–≤", "0", "texts_count")
        ]
        
        self.stat_labels = {}
        
        for i, (icon, title, value, key) in enumerate(cards_data):
            card = GlassCard(stats_frame)
            card.grid(row=0, column=i, padx=10, sticky='ew')
            
            content = tk.Frame(card, bg=ModernStyle.COLORS['card'])
            content.pack(fill='both', expand=True, padx=20, pady=20)
            
            tk.Label(
                content,
                text=icon,
                font=('Arial', 32),
                bg=ModernStyle.COLORS['card'],
                fg=ModernStyle.COLORS['primary']
            ).pack()
            
            value_label = tk.Label(
                content,
                text=value,
                font=ModernStyle.FONTS['title'],
                bg=ModernStyle.COLORS['card'],
                fg=ModernStyle.COLORS['text']
            )
            value_label.pack()
            
            tk.Label(
                content,
                text=title,
                font=ModernStyle.FONTS['small'],
                bg=ModernStyle.COLORS['card'],
                fg=ModernStyle.COLORS['text_secondary']
            ).pack()
            
            self.stat_labels[key] = value_label
        
        stats_frame.grid_columnconfigure(0, weight=1)
        stats_frame.grid_columnconfigure(1, weight=1)
        stats_frame.grid_columnconfigure(2, weight=1)
        stats_frame.grid_columnconfigure(3, weight=1)
        
        # –®–≤–∏–¥–∫—ñ –¥—ñ—ó
        actions_frame = GlassCard(page, title="–®–≤–∏–¥–∫—ñ –¥—ñ—ó")
        actions_frame.pack(fill='x', padx=20, pady=20)
        
        actions_content = tk.Frame(actions_frame, bg=ModernStyle.COLORS['card'])
        actions_content.pack(fill='x', padx=20, pady=(0, 20))
        
        buttons = [
            ("‚ûï –î–æ–¥–∞—Ç–∏ –∞–∫–∞—É–Ω—Ç", lambda: self.show_page("accounts"), ModernStyle.COLORS['success']),
            ("üéØ –î–æ–¥–∞—Ç–∏ —Ü—ñ–ª—å", lambda: self.show_page("targets"), ModernStyle.COLORS['primary']),
            ("üîó –ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ –¥—ñ—ó", lambda: self.show_page("chain"), ModernStyle.COLORS['warning']),
            ("‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –±–æ—Ç–∞", lambda: self.show_page("run"), ModernStyle.COLORS['success'])
        ]
        
        for i, (text, command, color) in enumerate(buttons):
            AnimatedButton(
                actions_content,
                text=text,
                command=command,
                bg=color
            ).grid(row=0, column=i, padx=5, sticky='ew')
        
        actions_content.grid_columnconfigure(0, weight=1)
        actions_content.grid_columnconfigure(1, weight=1)
        actions_content.grid_columnconfigure(2, weight=1)
        actions_content.grid_columnconfigure(3, weight=1)
        
        return page
    
    def create_run_page(self):
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –∑–∞–ø—É—Å–∫—É"""
        page = tk.Frame(self.content_area, bg=ModernStyle.COLORS['background'])
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header = tk.Label(
            page,
            text="‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó",
            font=ModernStyle.FONTS['title'],
            bg=ModernStyle.COLORS['background'],
            fg=ModernStyle.COLORS['text']
        )
        header.pack(pady=(10, 20))
        
        # –ì–æ–ª–æ–≤–Ω–∏–π —Å–∫—Ä–æ–ª—é—é—á–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_canvas = tk.Canvas(page, bg=ModernStyle.COLORS['background'], highlightthickness=0)
        main_scrollbar = ttk.Scrollbar(page, orient="vertical", command=main_canvas.yview)
        scrollable_page = tk.Frame(main_canvas, bg=ModernStyle.COLORS['background'])
        
        scrollable_page.bind(
            "<Configure>",
            lambda e: main_canvas.configure(scrollregion=main_canvas.bbox("all"))
        )
        
        main_canvas.create_window((0, 0), window=scrollable_page, anchor="nw")
        main_canvas.configure(yscrollcommand=main_scrollbar.set)
        
        # –†–æ–∑–º—ñ—â–µ–Ω–Ω—è —Å–∫—Ä–æ–ª—é—é—á–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        main_canvas.pack(side="left", fill="both", expand=True, padx=(20, 0))
        main_scrollbar.pack(side="right", fill="y", padx=(0, 20))
        
        # --- –ö–û–ú–ü–ê–ö–¢–ù–Ü –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø –ó–ê–ü–£–°–ö–£ ---
        settings_card = GlassCard(scrollable_page, title="–®–≤–∏–¥–∫—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è")
        settings_card.pack(fill='x', padx=20, pady=(0, 15))
        
        settings_content = tk.Frame(settings_card, bg=ModernStyle.COLORS['card'])
        settings_content.pack(fill='x', padx=20, pady=(0, 15))
        
        # –ö–æ–º–ø–∞–∫—Ç–Ω–∞ —Å—ñ—Ç–∫–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
        settings_grid = tk.Frame(settings_content, bg=ModernStyle.COLORS['card'])
        settings_grid.pack(fill='x', pady=5)
        
        # –†—è–¥–æ–∫ 1: –í–æ—Ä–∫–µ—Ä–∏ —Ç–∞ –ó–∞—Ç—Ä–∏–º–∫–∞
        tk.Label(
            settings_grid,
            text="–í–æ—Ä–∫–µ—Ä–∏:",
            font=ModernStyle.FONTS['body'],
            bg=ModernStyle.COLORS['card'],
            fg=ModernStyle.COLORS['text']
        ).grid(row=0, column=0, sticky='w', padx=(0, 10), pady=5)
        
        self.workers_var = tk.StringVar(value="3")
        workers_spin = tk.Spinbox(
            settings_grid,
            from_=1,
            to=10,
            width=8,
            textvariable=self.workers_var,
            font=ModernStyle.FONTS['body'],
            bg=ModernStyle.COLORS['surface'],
            fg=ModernStyle.COLORS['text']
        )
        workers_spin.grid(row=0, column=1, sticky='w', padx=(0, 20), pady=5)
        
        tk.Label(
            settings_grid,
            text="–ó–∞—Ç—Ä–∏–º–∫–∞ (—Ö–≤):",
            font=ModernStyle.FONTS['body'],
            bg=ModernStyle.COLORS['card'],
            fg=ModernStyle.COLORS['text']
        ).grid(row=0, column=2, sticky='w', padx=(0, 10), pady=5)
        
        self.delay_var = tk.StringVar(value="5")
        delay_spin = tk.Spinbox(
            settings_grid,
            from_=1,
            to=60,
            width=8,
            textvariable=self.delay_var,
            font=ModernStyle.FONTS['body'],
            bg=ModernStyle.COLORS['surface'],
            fg=ModernStyle.COLORS['text']
        )
        delay_spin.grid(row=0, column=3, sticky='w', pady=5)
        
        # –†—è–¥–æ–∫ 2: –†–µ–∂–∏–º —Ä–æ–±–æ—Ç–∏
        tk.Label(
            settings_grid,
            text="–†–µ–∂–∏–º:",
            font=ModernStyle.FONTS['body'],
            bg=ModernStyle.COLORS['card'],
            fg=ModernStyle.COLORS['text']
        ).grid(row=1, column=0, sticky='w', padx=(0, 10), pady=5)
        
        self.mode_var = tk.StringVar(value="continuous")
        mode_combo = ttk.Combobox(
            settings_grid,
            textvariable=self.mode_var,
            values=["continuous", "single_round"],
            state="readonly",
            width=15
        )
        mode_combo.grid(row=1, column=1, columnspan=2, sticky='w', pady=5)
        
        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å—ñ—Ç–∫–∏
        settings_grid.grid_columnconfigure(1, weight=1)
        settings_grid.grid_columnconfigure(3, weight=1)
        
        # --- –ö–ù–û–ü–ö–ò –£–ü–†–ê–í–õ–Ü–ù–ù–Ø (–ó–ê–í–ñ–î–ò –í–ò–î–ò–ú–Ü) ---
        control_card = GlassCard(scrollable_page, title="–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è")
        control_card.pack(fill='x', padx=20, pady=(0, 15))
        
        control_content = tk.Frame(control_card, bg=ModernStyle.COLORS['card'])
        control_content.pack(fill='x', padx=20, pady=(0, 15))
        
        # –û—Å–Ω–æ–≤–Ω—ñ –∫–Ω–æ–ø–∫–∏ –≤ –æ–¥–∏–Ω —Ä—è–¥–æ–∫
        main_buttons_frame = tk.Frame(control_content, bg=ModernStyle.COLORS['card'])
        main_buttons_frame.pack(fill='x', pady=(0, 10))
        
        self.start_btn = AnimatedButton(
            main_buttons_frame,
            text="‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç–∏",
            command=self.start_automation,
            bg=ModernStyle.COLORS['success']
        )
        self.start_btn.pack(side='left', padx=(0, 10))
        
        self.stop_btn = AnimatedButton(
            main_buttons_frame,
            text="‚èπÔ∏è –ó—É–ø–∏–Ω–∏—Ç–∏",
            command=self.stop_automation,
            bg=ModernStyle.COLORS['error'],
            state='disabled'
        )
        self.stop_btn.pack(side='left', padx=(0, 10))
        
        self.pause_btn = AnimatedButton(
            main_buttons_frame,
            text="‚è∏Ô∏è –ü–∞—É–∑–∞",
            command=self.pause_automation,
            bg=ModernStyle.COLORS['warning'],
            state='disabled'
        )
        self.pause_btn.pack(side='left')
        
        # –î–æ–¥–∞—Ç–∫–æ–≤—ñ –∫–Ω–æ–ø–∫–∏
        extra_buttons_frame = tk.Frame(control_content, bg=ModernStyle.COLORS['card'])
        extra_buttons_frame.pack(fill='x')
        
        AnimatedButton(
            extra_buttons_frame,
            text="üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–∏ –≤–æ—Ä–∫–µ—Ä–∏",
            command=self.restart_workers,
            bg=ModernStyle.COLORS['primary']
        ).pack(side='left', padx=(0, 10))
        
        AnimatedButton(
            extra_buttons_frame,
            text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
            command=lambda: self.show_page("statistics"),
            bg=ModernStyle.COLORS['info']
        ).pack(side='left')
        
        # --- –ö–û–ú–ü–ê–ö–¢–ù–ò–ô –°–¢–ê–¢–£–° –í–û–†–ö–ï–†–Ü–í ---
        workers_card = GlassCard(scrollable_page, title="–°—Ç–∞—Ç—É—Å –≤–æ—Ä–∫–µ—Ä—ñ–≤")
        workers_card.pack(fill='x', padx=20, pady=(0, 15))
        
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑ —Ñ—ñ–∫—Å–æ–≤–∞–Ω–æ—é –≤–∏—Å–æ—Ç–æ—é
        workers_container = tk.Frame(workers_card, bg=ModernStyle.COLORS['card'], height=250)
        workers_container.pack(fill='x', padx=20, pady=(0, 15))
        workers_container.pack_propagate(False)  # –§—ñ–∫—Å–æ–≤–∞–Ω–∞ –≤–∏—Å–æ—Ç–∞
        
        # –°–∫—Ä–æ–ª—é—é—á–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –≤–æ—Ä–∫–µ—Ä—ñ–≤
        workers_canvas = tk.Canvas(
            workers_container,
            bg=ModernStyle.COLORS['card'],
            highlightthickness=0,
            height=230
        )
        workers_scrollbar = ttk.Scrollbar(workers_container, orient="vertical", command=workers_canvas.yview)
        self.workers_container = tk.Frame(workers_canvas, bg=ModernStyle.COLORS['card'])
        
        self.workers_container.bind(
            "<Configure>",
            lambda e: workers_canvas.configure(scrollregion=workers_canvas.bbox("all"))
        )
        
        workers_canvas.create_window((0, 0), window=self.workers_container, anchor="nw")
        workers_canvas.configure(yscrollcommand=workers_scrollbar.set)
        
        workers_canvas.pack(side="left", fill="both", expand=True)
        workers_scrollbar.pack(side="right", fill="y")
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ–º–ø–∞–∫—Ç–Ω–∏—Ö –≤—ñ–¥–∂–µ—Ç—ñ–≤ –≤–æ—Ä–∫–µ—Ä—ñ–≤
        self.create_compact_worker_widgets(3)
        
        # --- –®–í–ò–î–ö–ê –°–¢–ê–¢–ò–°–¢–ò–ö–ê ---
        stats_card = GlassCard(scrollable_page, title="–®–≤–∏–¥–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        stats_card.pack(fill='x', padx=20, pady=(0, 20))
        
        stats_content = tk.Frame(stats_card, bg=ModernStyle.COLORS['card'])
        stats_content.pack(fill='x', padx=20, pady=(0, 15))
        
        # –ö–æ–º–ø–∞–∫—Ç–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ —Å—ñ—Ç—Ü—ñ
        stats_grid = tk.Frame(stats_content, bg=ModernStyle.COLORS['card'])
        stats_grid.pack(fill='x')
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–Ω–∏—Ö –ª–µ–π–±–ª—ñ–≤
        self.quick_stats = {}
        stats_items = [
            ("–ê–∫–∞—É–Ω—Ç–∏:", "0", "accounts"),
            ("–¶—ñ–ª—ñ:", "0", "targets"),
            ("–î—ñ—ó:", "0", "actions"),
            ("–í–æ—Ä–∫–µ—Ä–∏:", "0", "workers")
        ]
        
        for i, (label, value, key) in enumerate(stats_items):
            row, col = i // 2, (i % 2) * 2
            
            tk.Label(
                stats_grid,
                text=label,
                font=ModernStyle.FONTS['small'],
                bg=ModernStyle.COLORS['card'],
                fg=ModernStyle.COLORS['text_secondary']
            ).grid(row=row, column=col, sticky='w', padx=(0, 10), pady=2)
            
            value_label = tk.Label(
                stats_grid,
                text=value,
                font=ModernStyle.FONTS['body'],
                bg=ModernStyle.COLORS['card'],
                fg=ModernStyle.COLORS['text']
            )
            value_label.grid(row=row, column=col+1, sticky='w', padx=(0, 30), pady=2)
            
            self.quick_stats[key] = value_label
        
        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å—ñ—Ç–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats_grid.grid_columnconfigure(1, weight=1)
        stats_grid.grid_columnconfigure(3, weight=1)
        
        # –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫–æ–ª–µ—Å–æ–º –º–∏—à—ñ
        def _on_mousewheel(event):
            main_canvas.yview_scroll(int(-1*(event.delta/120)), "units")
        
        def bind_mousewheel(widget):
            widget.bind("<MouseWheel>", _on_mousewheel)
            for child in widget.winfo_children():
                bind_mousewheel(child)
        
        bind_mousewheel(page)
        
        return page
    
    def create_compact_worker_widgets(self, count):
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ–º–ø–∞–∫—Ç–Ω–∏—Ö –≤—ñ–¥–∂–µ—Ç—ñ–≤ –≤–æ—Ä–∫–µ—Ä—ñ–≤"""
        # –û—á–∏—â–µ–Ω–Ω—è —ñ—Å–Ω—É—é—á–∏—Ö –≤—ñ–¥–∂–µ—Ç—ñ–≤
        for widget in self.worker_widgets:
            widget.destroy()
        self.worker_widgets.clear()
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–∏—Ö –∫–æ–º–ø–∞–∫—Ç–Ω–∏—Ö –≤—ñ–¥–∂–µ—Ç—ñ–≤
        for i in range(count):
            worker_widget = CompactWorkerStatusWidget(self.workers_container, i)
            worker_widget.pack(fill='x', padx=5, pady=3)
            self.worker_widgets.append(worker_widget)
    
    def restart_workers(self):
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –≤–æ—Ä–∫–µ—Ä—ñ–≤"""
        if self.automation_manager and self.automation_manager.is_running():
            messagebox.showwarning("–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è", "–°–ø–æ—á–∞—Ç–∫—É –∑—É–ø–∏–Ω—ñ—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—é")
            return
        
        try:
            # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –≤–æ—Ä–∫–µ—Ä—ñ–≤
            workers_count = int(self.workers_var.get())
            self.create_compact_worker_widgets(workers_count)
            
            # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –≤–æ—Ä–∫–µ—Ä—ñ–≤
            for widget in self.worker_widgets:
                widget.update_status('idle')
                widget.update_stats({})
            
            messagebox.showinfo("–£—Å–ø—ñ—Ö", f"–í–æ—Ä–∫–µ—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω—ñ ({workers_count} –≤–æ—Ä–∫–µ—Ä—ñ–≤)")
            
        except Exception as e:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫—É –≤–æ—Ä–∫–µ—Ä—ñ–≤: {e}")


class CompactWorkerStatusWidget(tk.Frame):
    """–ö–æ–º–ø–∞–∫—Ç–Ω–∏–π –≤—ñ–¥–∂–µ—Ç —Å—Ç–∞—Ç—É—Å—É –≤–æ—Ä–∫–µ—Ä–∞"""
    
    def __init__(self, parent, worker_id, **kwargs):
        super().__init__(parent, **kwargs)
        self.configure(bg=ModernStyle.COLORS['surface'], relief='flat', bd=1)
        
        self.worker_id = worker_id
        self.status = 'idle'
        
        self.create_widgets()
    
    def create_widgets(self):
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ–º–ø–∞–∫—Ç–Ω–∏—Ö –≤—ñ–¥–∂–µ—Ç—ñ–≤"""
        # –û—Å–Ω–æ–≤–Ω–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_frame = tk.Frame(self, bg=ModernStyle.COLORS['surface'])
        main_frame.pack(fill='x', padx=8, pady=6)
        
        # –õ—ñ–≤–∞ —á–∞—Å—Ç–∏–Ω–∞: —Å—Ç–∞—Ç—É—Å
        left_frame = tk.Frame(main_frame, bg=ModernStyle.COLORS['surface'])
        left_frame.pack(side='left', fill='x', expand=True)
        
        # –°—Ç–∞—Ç—É—Å —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ç–∞ –Ω–∞–∑–≤–∞
        status_frame = tk.Frame(left_frame, bg=ModernStyle.COLORS['surface'])
        status_frame.pack(fill='x')
        
        self.status_dot = tk.Label(
            status_frame,
            text="‚óè",
            font=('Arial', 12),
            bg=ModernStyle.COLORS['surface'],
            fg=ModernStyle.COLORS['text_secondary']
        )
        self.status_dot.pack(side='left')
        
        tk.Label(
            status_frame,
            text=f"–í–æ—Ä–∫–µ—Ä #{self.worker_id + 1}",
            font=ModernStyle.FONTS['small'],
            bg=ModernStyle.COLORS['surface'],
            fg=ModernStyle.COLORS['text']
        ).pack(side='left', padx=(5, 0))
        
        self.status_label = tk.Label(
            status_frame,
            text="–û—á—ñ–∫—É–≤–∞–Ω–Ω—è",
            font=('Arial', 9),
            bg=ModernStyle.COLORS['surface'],
            fg=ModernStyle.COLORS['text_secondary']
        )
        self.status_label.pack(side='right')
        
        # –ü—Ä–∞–≤–∞ —á–∞—Å—Ç–∏–Ω–∞: –∫–æ–º–ø–∞–∫—Ç–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        right_frame = tk.Frame(main_frame, bg=ModernStyle.COLORS['surface'])
        right_frame.pack(side='right')
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ –æ–¥–Ω–æ–º—É —Ä—è–¥–∫—É
        stats_text = tk.Label(
            right_frame,
            text="–ê–∫–∞—É–Ω—Ç–∏: 0 | –î—ñ—ó: 0 | –£—Å–ø—ñ—à–Ω–æ: 0",
            font=('Arial', 8),
            bg=ModernStyle.COLORS['surface'],
            fg=ModernStyle.COLORS['text_muted']
        )
        stats_text.pack()
        
        self.stats_label = stats_text
    
    def update_status(self, status, current_account=None):
        """–û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –≤–æ—Ä–∫–µ—Ä–∞"""
        self.status = status
        
        status_colors = {
            'idle': ModernStyle.COLORS['text_secondary'],
            'working': ModernStyle.COLORS['success'],
            'error': ModernStyle.COLORS['error'],
            'paused': ModernStyle.COLORS['warning']
        }
        
        status_texts = {
            'idle': '–û—á—ñ–∫—É–≤–∞–Ω–Ω—è',
            'working': f'{current_account}' if current_account else '–ê–∫—Ç–∏–≤–Ω–∏–π',
            'error': '–ü–æ–º–∏–ª–∫–∞',
            'paused': '–ü–∞—É–∑–∞'
        }
        
        self.status_dot.configure(fg=status_colors.get(status, status_colors['idle']))
        self.status_label.configure(text=status_texts.get(status, '–ù–µ–≤—ñ–¥–æ–º–æ'))
    
    def update_stats(self, stats):
        """–û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤–æ—Ä–∫–µ—Ä–∞"""
        accounts = stats.get('processed_accounts', 0)
        total = stats.get('total_actions', 0) 
        successful = stats.get('successful_actions', 0)
        
        stats_text = f"–ê–∫–∞—É–Ω—Ç–∏: {accounts} | –î—ñ—ó: {total} | –£—Å–ø—ñ—à–Ω–æ: {successful}"
        self.stats_label.configure(text=stats_text)
    
    def create_worker_widgets(self, count):
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—ñ–¥–∂–µ—Ç—ñ–≤ –≤–æ—Ä–∫–µ—Ä—ñ–≤"""
        # –û—á–∏—â–µ–Ω–Ω—è —ñ—Å–Ω—É—é—á–∏—Ö –≤—ñ–¥–∂–µ—Ç—ñ–≤
        for widget in self.worker_widgets:
            widget.destroy()
        self.worker_widgets.clear()
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–∏—Ö –≤—ñ–¥–∂–µ—Ç—ñ–≤
        for i in range(count):
            worker_widget = WorkerStatusWidget(self.workers_container, i)
            worker_widget.pack(fill='x', padx=10, pady=5)
            self.worker_widgets.append(worker_widget)
    
    def show_page(self, page_name):
        """–ü–æ–∫–∞–∑ —Å—Ç–æ—Ä—ñ–Ω–∫–∏"""
        # –ü—Ä–∏—Ö–æ–≤—É–≤–∞–Ω–Ω—è –≤—Å—ñ—Ö —Å—Ç–æ—Ä—ñ–Ω–æ–∫
        for page in self.pages.values():
            page.pack_forget()
        
        # –ü–æ–∫–∞–∑ –≤–∏–±—Ä–∞–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏
        if page_name in self.pages:
            self.pages[page_name].pack(fill='both', expand=True)
        
        # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–æ—ó –∫–Ω–æ–ø–∫–∏
        for btn_name, btn in self.nav_buttons.items():
            if btn_name == page_name:
                btn.configure(bg=ModernStyle.COLORS['sidebar_active'])
                btn.active = True
            else:
                btn.configure(bg=ModernStyle.COLORS['sidebar'])
                btn.active = False
        
        # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–∞ –≥–æ–ª–æ–≤–Ω—ñ–π —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ
        if page_name == "main":
            self.update_main_stats()
    
    def update_main_stats(self):
        """–û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–∞ –≥–æ–ª–æ–≤–Ω—ñ–π —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ"""
        try:
            # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö
            accounts_count = len(self.pages["accounts"].get_accounts())
            targets_count = len(self.pages["targets"].get_targets())
            chain_count = len(self.pages["chain"].get_chain())
            texts_count = len(self.pages["texts"].get_texts('story_replies')) + len(self.pages["texts"].get_texts('direct_messages'))
            
            # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ª–µ–π–±–ª—ñ–≤
            self.stat_labels["accounts_count"].configure(text=str(accounts_count))
            self.stat_labels["targets_count"].configure(text=str(targets_count))
            self.stat_labels["chain_count"].configure(text=str(chain_count))
            self.stat_labels["texts_count"].configure(text=str(texts_count))
            
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    
    def start_automation(self):
        """–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó"""
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–∞–Ω–∏—Ö
        accounts = self.pages["accounts"].get_accounts()
        targets = self.pages["targets"].get_targets()
        chain = self.pages["chain"].get_chain()
        browser_settings = self.pages["browser"].get_settings()
        
        if not accounts:
            messagebox.showwarning("–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è", "–î–æ–¥–∞–π—Ç–µ —Ö–æ—á–∞ –± –æ–¥–∏–Ω –∞–∫–∞—É–Ω—Ç")
            return
        
        if not targets:
            messagebox.showwarning("–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è", "–î–æ–¥–∞–π—Ç–µ —Ö–æ—á–∞ –± –æ–¥–Ω—É —Ü—ñ–ª—å")
            return
        
        if not chain:
            messagebox.showwarning("–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è", "–°—Ç–≤–æ—Ä—ñ—Ç—å –ª–∞–Ω—Ü—é–∂–æ–∫ –¥—ñ–π")
            return
        
        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
        workers_count = int(self.workers_var.get())
        delay_minutes = int(self.delay_var.get())
        mode = self.mode_var.get()
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—ñ–¥–∂–µ—Ç—ñ–≤ –≤–æ—Ä–∫–µ—Ä—ñ–≤
        self.create_worker_widgets(workers_count)
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó
        if not self.automation_manager:
            self.automation_manager = AutomationManager()
        
        # –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó
        automation_config = {
            'accounts': accounts,
            'targets': targets,
            'action_chain': chain,
            'browser_settings': browser_settings,
            'workers_count': workers_count,
            'delay_minutes': delay_minutes,
            'mode': mode,
            'texts': {
                'story_replies': self.pages["texts"].get_texts('story_replies'),
                'direct_messages': self.pages["texts"].get_texts('direct_messages')
            }
        }
        
        # –ó–∞–ø—É—Å–∫ –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ
        def run_automation():
            try:
                self.automation_manager.start_automation(automation_config, self.update_worker_status)
            except Exception as e:
                messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", f"–ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó: {e}")
                self.stop_automation()
        
        automation_thread = threading.Thread(target=run_automation, daemon=True)
        automation_thread.start()
        
        # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
        self.start_btn.configure(state='disabled')
        self.stop_btn.configure(state='normal')
        self.pause_btn.configure(state='normal')
        self.status_label.configure(text="‚óè –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—è –∞–∫—Ç–∏–≤–Ω–∞", fg=ModernStyle.COLORS['success'])
        
        messagebox.showinfo("–£—Å–ø—ñ—Ö", f"–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—è –∑–∞–ø—É—â–µ–Ω–∞ –∑ {workers_count} –≤–æ—Ä–∫–µ—Ä–∞–º–∏")
    
    def stop_automation(self):
        """–ó—É–ø–∏–Ω–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó"""
        if self.automation_manager:
            self.automation_manager.stop_automation()
        
        # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –≤–æ—Ä–∫–µ—Ä—ñ–≤
        for widget in self.worker_widgets:
            widget.update_status('idle')
        
        # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
        self.start_btn.configure(state='normal')
        self.stop_btn.configure(state='disabled')
        self.pause_btn.configure(state='disabled')
        self.status_label.configure(text="‚óè –ì–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–±–æ—Ç–∏", fg=ModernStyle.COLORS['success'])
        
        messagebox.showinfo("–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è", "–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—è –∑—É–ø–∏–Ω–µ–Ω–∞")
    
    def pause_automation(self):
        """–ü–∞—É–∑–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó"""
        if self.automation_manager:
            self.automation_manager.pause_automation()
        
        # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –≤–æ—Ä–∫–µ—Ä—ñ–≤
        for widget in self.worker_widgets:
            if widget.status == 'working':
                widget.update_status('paused')
        
        self.status_label.configure(text="‚óè –ù–∞ –ø–∞—É–∑—ñ", fg=ModernStyle.COLORS['warning'])
        messagebox.showinfo("–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è", "–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—è –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø–∞—É–∑—É")
    
    def update_worker_status(self, worker_id, status, account=None, stats=None):
        """–û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –≤–æ—Ä–∫–µ—Ä–∞"""
        try:
            if worker_id < len(self.worker_widgets):
                self.worker_widgets[worker_id].update_status(status, account)
                if stats:
                    self.worker_widgets[worker_id].update_stats(stats)
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –≤–æ—Ä–∫–µ—Ä–∞: {e}")
    
    def load_all_data(self):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤—Å—ñ—Ö –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –¥–∞–Ω–∏—Ö"""
        try:
            # –î–∞–Ω—ñ –∑–∞–≤–∞–Ω—Ç–∞–∂—É—é—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤ –∫–æ–∂–Ω–æ–º—É –≤—ñ–¥–∂–µ—Ç—ñ
            self.update_main_stats()
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö: {e}")
    
    def on_closing(self):
        """–û–±—Ä–æ–±–∫–∞ –∑–∞–∫—Ä–∏—Ç—Ç—è –ø—Ä–æ–≥—Ä–∞–º–∏"""
        if self.automation_manager and self.automation_manager.is_running():
            if messagebox.askyesno("–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è", "–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—è –∞–∫—Ç–∏–≤–Ω–∞. –ó—É–ø–∏–Ω–∏—Ç–∏ —ñ –≤–∏–π—Ç–∏?"):
                self.stop_automation()
                self.root.destroy()
        else:
            if messagebox.askyesno("–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è", "–ó–∞–∫—Ä–∏—Ç–∏ –ø—Ä–æ–≥—Ä–∞–º—É?"):
                self.root.destroy()


# –î–æ–ø–æ–º—ñ–∂–Ω—ñ –∫–ª–∞—Å–∏

class DataManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–∞–Ω–∏—Ö"""
    
    def __init__(self):
        self.data_dir = "data"
        os.makedirs(self.data_dir, exist_ok=True)
    
    def save_data(self, filename, data):
        """–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö"""
        try:
            filepath = os.path.join(self.data_dir, filename)
            with open(filepath, 'w', encoding='utf-8') as f:
                json.dump(data, f, indent=2, ensure_ascii=False)
            return True
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è {filename}: {e}")
            return False
    
    def load_data(self, filename):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö"""
        try:
            filepath = os.path.join(self.data_dir, filename)
            if os.path.exists(filepath):
                with open(filepath, 'r', encoding='utf-8') as f:
                    return json.load(f)
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è {filename}: {e}")
        return None


class AutomationManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó"""
    
    def __init__(self):
        self.running = False
        self.paused = False
        self.workers = []
    
    def start_automation(self, config, status_callback):
        """–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó"""
        self.running = True
        self.paused = False
        
        # –¢—É—Ç –±—É–¥–µ –ª–æ–≥—ñ–∫–∞ –∑–∞–ø—É—Å–∫—É –≤–æ—Ä–∫–µ—Ä—ñ–≤
        # –ü–æ–∫–∏ —â–æ —Å–∏–º—É–ª—è—Ü—ñ—è —Ä–æ–±–æ—Ç–∏
        import time
        
        workers_count = config['workers_count']
        accounts = config['accounts']
        targets = config['targets']
        
        for worker_id in range(workers_count):
            if worker_id < len(accounts):
                account = accounts[worker_id]
                status_callback(worker_id, 'working', account['username'])
                
                # –°–∏–º—É–ª—è—Ü—ñ—è —Ä–æ–±–æ—Ç–∏
                for i, target in enumerate(targets):
                    if not self.running:
                        break
                    
                    while self.paused:
                        time.sleep(1)
                    
                    status_callback(worker_id, 'working', f"{account['username']} -> {target}")
                    time.sleep(2)  # –°–∏–º—É–ª—è—Ü—ñ—è –∑–∞—Ç—Ä–∏–º–∫–∏
                    
                    # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                    stats = {
                        'processed_accounts': 1,
                        'total_actions': i + 1,
                        'successful_actions': i + 1,
                        'errors': 0
                    }
                    status_callback(worker_id, 'working', account['username'], stats)
                
                status_callback(worker_id, 'idle')
    
    def stop_automation(self):
        """–ó—É–ø–∏–Ω–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó"""
        self.running = False
        self.paused = False
    
    def pause_automation(self):
        """–ü–∞—É–∑–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó"""
        self.paused = True
    
    def is_running(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –ø—Ä–∞—Ü—é—î –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—è"""
        return self.running


def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    root = tk.Tk()
    app = InstagramBotGUI(root)
    root.mainloop()


if __name__ == "__main__":
    main()